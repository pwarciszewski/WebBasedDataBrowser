{"version":3,"sources":["reducers/datatree/datatree.js","reducers/activeframes/activeframes.js","reducers/loglist/loglist.js","reducers/openwindows/openwindows.js","reducers/imagerois/imagerois.js","reducers/availableops/availableops.js","reducers/serverroutine/serverroutine.js","reducers/index.js","api/server_communication.js","actions/datatree/index.js","actions/activeframes/index.js","actions/loglist/index.js","actions/openwindows/index.js","actions/imagerois/index.js","actions/serverroutines/index.js","components/MenuBar/components/DataTree/DataTree.jsx","components/MenuBar/components/NewDataWatcher/NewDataWatcher.jsx","components/MenuBar/components/AddWindowSelection/AddWindowSelection.jsx","components/MenuBar/components/FileDownloader/FileDownloader.jsx","components/MenuBar/components/OperationsMenu/Variable.jsx","components/MenuBar/components/OperationsMenu/VariableDesigner.jsx","components/MenuBar/components/OperationsMenu/Operation.jsx","components/MenuBar/components/OperationsMenu/RoutinesDesigner.jsx","components/MenuBar/components/OperationsMenu/OperationsMenu.jsx","actions/availableops/index.js","components/MenuBar/MenuBar.jsx","components/WorkSpace/wrapped_components/WindowWrapper/WindowWrapper.jsx","components/WorkSpace/components/SelectedFramesList/DataTile.jsx","components/WorkSpace/components/SelectedFramesList/NavigButtons.jsx","components/WorkSpace/components/SelectedFramesList/SelectedFramesList.jsx","components/WorkSpace/components/LogList/LogList.jsx","components/WorkSpace/components/FrameAttributesList/Attribute.jsx","components/WorkSpace/components/FrameAttributesList/FrameAttributesList.jsx","components/WorkSpace/components/ImageDisplayer/ImageSpace.jsx","components/WorkSpace/components/ImageDisplayer/ImageDisplayer.jsx","components/WorkSpace/components/SelectRoi/components/ImageSpaceRoi.jsx","components/WorkSpace/components/SelectRoi/components/ImageDisplayerRoi.jsx","components/WorkSpace/components/SelectRoi/components/RoiRectangle.jsx","components/WorkSpace/components/SelectRoi/components/RoiPoint.jsx","components/WorkSpace/components/SelectRoi/SelectRoi.jsx","components/WorkSpace/components/RoiManager/RoiTile.jsx","components/WorkSpace/components/RoiManager/RoiManager.jsx","components/WorkSpace/components/ChartDisplayer/ChartDisplayer.jsx","components/WorkSpace/components/CSVDisplayer/CSVDisplayer.jsx","components/WorkSpace/wrapped_components/index.js","components/WorkSpace/WorkSpace.jsx","App.jsx","index.js"],"names":["datatree","state","action","type","new_data_tree","mergeStateWithNewFrames","old_state","new_frames","current_focussed_index","findIndex","iter_frame","focussed","temp_state","update","$set","frame","destination_iter_token","data","iter_token","index_to_put","data_frames","activeframes","temp_list","active_frames_list","reverse","forEach","new_focussed_index","index","indexOf","frame_to_remove","length","new_state","slice","new_focussed_index2","previous_index2","new_state2","moveFocusForward","next_index","moveFocusBack","createUpdatedState","frames","iter_index_to_update","in_state_iter","index_to_update","in_state_frame","id","frames_to_update","loglist","prepareStateWithAddedLog","text","ID","Z_INDEX","openwindows","window_type","z_index","window","updated_state","window_index","ROI_ID","imagerois","roi_id","roi_type","roi_data","display_roi","updateRoiDataXY","roi","x","roi_new_x","y","roi_new_y","updateRoiDataWH","width","roi_new_w","height","roi_new_h","setRoiDisplay","availableops","new_ops","operation","some","entry","operation_name","push","available_ops_list","op","updated_operation","operation_properties","serverroutine","new_routine","addOperation","updated_routine","removeOperation","updateOperation","param","value","routine","params","combineReducers","SERVER_IP","postData","a","url","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","getNewestID","wrapped_action","then","catch","err","console","log","fetchData","selected_frames","group_by_iter","setFocus","addLog","addWindow","focusWindow","addImageRoi","updateImageRoiXY","setNewRoutine","DataTree","useSelector","dispatch","useDispatch","top_z_index","maxZ","findMaxZIndex","className","style","zIndex","onChange","currentNode","selectedNodes","getFramesIDsFromTree","nodes_list","IDs","node_i","hasOwnProperty","Number","children","ids_list","nodes","id_i","address","_id","split","shift","last_add","map","i","pop","node","l","extractNodesFromInternalIDs","onFocus","retrieved_data","keepTreeOnSearch","showPartiallySelected","texts","placeholder","NewDataWatcher","useState","last_newest_id","setLastId","checked","toggleChecked","newest_id","setNewNewestId","useEffect","interval","setInterval","new_id","requested_ids","addNewFrame","clearInterval","active","toString","onClick","String","AddWindowSelection","FileDownloader","active_frames","frames_ids","reduce","acc","cur","undefined","concat","extractIds","onSubmit","e","confirm","preventDefault","handleSubmitCommand","name","Variable","variable","handleValueChange","defaultValue","event","target","VariableDesigner","param_name","available_rois","handleRoiSelection","rois","options","key","renderRoiOptions","Operation","vars_list","renderVariables","RoutinesDesigner","avail_ops","selected_operation","setSelectedOperation","ops","ops_list","variables","renderOptionsForOperationSelection","parse","operations_list","entries","renderOperationsForRoutine","add_log_action","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","fontFamily","background","overlay","backgroundColor","renderGroupOption","group_name","dev_name","focussed_iteration","find","iteration","data_source","findFocussedIterationIDS","frames_list","sequence_name","findFramesForGroup","OperationsMenu","show","setShow","handleShow","fetchOps","available_operations","frames_groups","includes","findDifferentFramesGroups","available_devices","devices_names_list","temp_name","findAvailableDevices","selected_group","setSelectedGroup","selected_device","setSelectedDevice","selected_op_object","setSelectedOpObj","selected_op_name","setSelectedOp","selected_roi","setSelectedRoi","prepareTailoredSetSelectedOpObj","obj","newobj","isOpen","shouldCloseOnOverlayClick","onRequestClose","op_name","renderOperationOption","roi_in","rendered_variables","error","renderParamsForOperation","parameters","update_results_action","dispatchOperation","operation_in","extracted_params","extractParameters","MenuBar","WindowWrapper","props","bounds","dragHandleClassName","resizeGrid","dragGrid","default","default_width","default_height","lockAspectRatio","lock_aspect_ratio","enableResizing","resizable","onDragStart","window_name","prepareImgUrl","source_device","source_result","frame_index_in_iteration","results","DataTile","img_source_device","img_source_result","src","data_element","NavigButtons","frame_focussed","SelectedFramesList","active_iterations","iter_focussed","iter","tileRef","useRef","spaceRef","ref","current","offset","offsetTop","scrollTop","clientHeight","scrollTo","scrollToRef","selected_result","setSelectedResult","available_IMG_results","device_name","results_names_list","result","findAvailableIMGResults","result_name","LogList","logs","React","createRef","scrollHeight","renderCell","Attribute","FrameAttributesList","selected_iter_frames","selected_option","setSelectedOption","selection","device","parsed","selected_device_index","selected_data","properties","item","parseIteration","attribute","dev_index","ImageSpace","ImageDisplayer","selected_iteration","avail_devices","getAvailableDevices","avail_img_results","device_index","getAvailableResults","ImageSpaceRoi","onLoad","imgOnload","naturalWidth","naturalHeight","ImageDisplayerRoi","RoiRectangle","placement","onDrag","onResize","position","size","title","onDragStop","_","onResizeStop","direction","delta","offsetWidth","offsetHeight","RoiPoint","SelectRoi","currentImageSizeX","setImageSizeX","setImageSizeY","translateRectDataToPos","scalling","Math","round","translatePointDataToPos","translateValToData","val","translatePointValToData","updatePosition","updatePointPostion","updateSize","w","h","rois_to_display","filter","printRoi","RoiTile","RECTANGLE_DEF","POINT_DEF","RoiManager","all_rois","COLOR_PALETTE","compareArrays","array1","array2","Array","getResultStr","getPropertyStr","property","extractDataFromFrames","raw_value_source","values","value_source","option","f","assignColorsToIterations","iterations_list","frames_in_iterations","findDiferentFramesGroups","group_color_assignment","id_color_assignment","renderOptionsForEchartsChart","xlabel","ylabel","ranges","color_assignment","x_name","y_name","xlabel_parsed","ylabel_parsed","tooltip","trigger","showContent","axisPointer","xAxis","min","min_x","max","max_x","nameLocation","splitLine","lineStyle","yAxis","min_y","max_y","series","color","emphasis","label","fontSize","handleCsvDownload","filename","points","extracted_data_points","point","rows","processRow","row","finalVal","j","innerValue","Date","toLocaleString","replace","search","csvFile","blob","Blob","navigator","msSaveBlob","link","document","createElement","download","URL","createObjectURL","setAttribute","visibility","appendChild","click","removeChild","exportToCsv","ChartDisplayer","x_axis_selection","setXAxis","y_axis_selection","setYAxis","avail_options","iteration_list","el","getOptionsForAxes","x_data","y_data","temp","getDataPointsFromXandY","data_points","values_x","values_y","apply","range_x","range_y","getRangesForPlot","events","seriesName","onEvents","renderEchartsOptions","data_list","rendered_options","toolbox","feature","dataZoom","yAxisIndex","zoom","back","restore","saveAsImage","animation","showSymbol","data_set","CSVDisplayer","display_focussed","setDisplayFocussed","available_CSV_results","findAvailableCSVResults","selected_traces_urls","only_focussed","csv_urls_list","findCSVurls","selected_traces","setSelectedTraces","loadManyCSVFiles","url_list","callback_function","final_data_list","file_path","readRemoteFile","complete","defaultChecked","notMerge","WrappedLogList","WrappedSelectedFramesList","WrappedRoiManager","WrappedAttributesList","WrappedImageDisplayer","WrappedSelectRoi","WrappedChartDisplayer","WrappedCSVDisplayer","WorkSpace","windows","selectWindow","App","store","createStore","rootReducer","render","getElementById"],"mappings":"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","file":"static/js/main.3926e4b4.chunk.js","sourcesContent":["const datatree = (state = [], action) => {\n    switch(action.type) {\n        case 'LOAD_DATATREE':\n            return action.new_data_tree\n        default:\n            return state\n    }\n}\n\nexport default datatree","import update from 'immutability-helper'\n\n// State entry:\n// {iter_token: string representing given iteration\n//  data_frames: list of data frames in a given iteration\n//  focussed: boolean representing if a given iteration is now focussed }\n\n// data_frames list entry:\n// This entry contains actuall information about collected and processed data:\n// {id: int server side ID of a data frame\n//  data: {name: string representing data frame,\n//           sequence_name: string representing sequence name in which data was collected,\n//          data_source: string representing source of the data i.e a device,\n//           properties: object containing data frame properties in a following fashion: key: value,\n//           results: object containing data frame results in a following fashion: key: {type: type_string, value: value_string},\n//           iter_token: token for an iteration, should be same as higher level iter_token}\n\nconst mergeStateWithNewFrames = (old_state, new_frames) => {\n    const current_focussed_index = old_state.findIndex(iter_frame => iter_frame.focussed === true)\n    var temp_state = []\n    if(current_focussed_index !== -1) {\n        temp_state= update(old_state, {\n            [current_focussed_index]: {focussed: {$set: false}}\n        })\n    }\n    for(const frame of new_frames) {\n        const destination_iter_token = frame.data.iter_token\n        const index_to_put = temp_state.findIndex(iter_frame => iter_frame.iter_token === destination_iter_token)\n        if(index_to_put === -1) {\n            temp_state = [\n                {iter_token: destination_iter_token, focussed: false, data_frames: [frame]},\n                ...temp_state\n            ]\n        } else {\n            temp_state[index_to_put].data_frames = [\n                frame,\n                ...temp_state[index_to_put].data_frames\n            ]\n        }\n    }\n    temp_state[0].focussed = true\n    return(temp_state)\n}\n\n\nconst activeframes = (state = [], action) => {\n    let temp_list = []\n    switch(action.type) {\n        case 'SET_ACTIVE_FRAMES':\n            temp_list = action.active_frames_list.reverse()\n            temp_list.forEach(frame => frame.focussed = false)\n            temp_list[0].focussed = true\n            return temp_list\n        case 'CLEAR_FRAMES':\n            return []\n        case 'ADD_ACTIVE_FRAMES':\n            return(mergeStateWithNewFrames(state, action.new_frames))\n        case 'REMOVE_ONE_OF_ACTIVE_FRAMES':\n            let index = state.indexOf(action.frame_to_remove)\n            let new_focussed_index\n            if(state.length>1 & index+1<state.length){\n                new_focussed_index = index + 1\n            } else if (index+1 === state.length & index !== 0) {\n                new_focussed_index = index - 1\n            } else {\n                new_focussed_index = index\n            }\n            let new_state = []\n            if(state[index].focussed){\n                new_state = update(state, {\n                    [new_focussed_index]: {focussed: {$set: true}}\n                })\n            } else {\n                new_state = state\n            }\n            return ([\n                ...new_state.slice(0, index),\n                ...new_state.slice(index+1)\n            ])\n        case 'SET_FOCUS':\n            let new_focussed_index2 = state.indexOf(action.frame)\n            let previous_index2 = state.findIndex(frame => frame.focussed === true)\n            const new_state2 = update(state, {\n                [previous_index2]: {focussed: {$set: false}},\n                [new_focussed_index2]: {focussed: {$set: true}}\n            })\n            return new_state2\n        case 'FOCUS_NEXT':\n            const moveFocusForward = frame => {\n                const index = state.indexOf(frame)\n                const next_index = (index < state.length - 1)? index+1 : index\n                const new_state = (state.length !== 0)? update(state, {\n                    [index]: {focussed: {$set: false}},\n                    [next_index]: {focussed: {$set: true}}\n                }) : state\n                return new_state\n            }\n            return(moveFocusForward(action.frame))\n        case 'FOCUS_PREVIOUS':\n            const moveFocusBack = frame => {\n                const index = state.indexOf(frame)\n                const next_index = (index > 0)? index-1 : index\n                const new_state = (state.length !== 0)? update(state, {\n                    [index]: {focussed: {$set: false}},\n                    [next_index]: {focussed: {$set: true}}\n                }) : state\n                return new_state\n            }\n            return(moveFocusBack(action.frame))\n        case 'UPDATE_ACTIVE_FRAMES':\n            const createUpdatedState = (frames) => {\n                let new_state = state\n                for(const frame of frames){\n                    const iter_index_to_update = state.findIndex(in_state_iter => in_state_iter.iter_token === frame.data.iter_token)\n                    const index_to_update = state[iter_index_to_update].data_frames.findIndex(in_state_frame => in_state_frame.id === frame.id)\n                    new_state = update(new_state, {\n                        [iter_index_to_update]: {\n                            data_frames: {\n                                [index_to_update]: {data: {$set: frame.data}}}}\n                    })\n                }\n            return new_state\n            }\n            return(createUpdatedState(action.frames_to_update))\n        default:\n            return state\n    }\n}\n\nexport default activeframes","const state_max_len = 200\n\nconst initial_log = 'Welcome to WBDB UI!'\n\nconst loglist = (state = [initial_log], action) => {\n    switch(action.type) {\n        case 'ADD_LOG':\n            const prepareStateWithAddedLog = text => {\n                const new_state = (state.length < state_max_len)?\n                [...state, text] :\n                [...state.slice(1, state_max_len), text]\n                return new_state\n            }\n            return prepareStateWithAddedLog(action.text)\n        default:\n            return state\n    }\n}\n\nexport default loglist","import update from 'immutability-helper'\n\nlet ID = 0\nlet Z_INDEX = 0\n\n//const initial_state = [{id:0, window_type: 'LogList', z_index: 0}, {id:1, window_type:'SelectedFrames', z_index: 0}]\n//Potential overflow error, when Z_index > 2^31\n\nconst openwindows = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_WINDOW':\n            ID = ID + 1\n            Z_INDEX = Z_INDEX + 1\n            return(\n                [...state,\n                    {id: ID, window_type: action.window_type, z_index: Z_INDEX} ]\n            )\n        case 'REMOVE_WINDOW':\n            return(\n                [...state.slice(0, state.findIndex(window => window.id === action.id)),\n                 ...state.slice(state.findIndex(window => window.id === action.id) + 1)]\n            )\n        case 'FOCUS_WINDOW':\n            let updated_state = state\n\n            let window_index = state.findIndex(window => window.id === action.id)\n            if(window_index !== -1) {\n                if(state[window_index].z_index !== Z_INDEX) {\n                    \n                    Z_INDEX = Z_INDEX + 1\n                    \n                    updated_state = update(state, {\n                        [window_index] : {z_index: {$set: Z_INDEX}}\n                    })    \n                }\n            } \n            return(updated_state)\n        default:\n            return state\n    }\n}\n\nexport default openwindows\n","import update from 'immutability-helper'\n\nlet ROI_ID = 0\n\nconst imagerois = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_IMAGE_ROI':\n            ROI_ID = ROI_ID + 1\n            return(\n                [...state,\n                { roi_id: ROI_ID,\n                  roi_type: action.roi_type,\n                  roi_data: action.roi_data,\n                  display_roi: action.display_roi}]\n            )\n        case 'UPDATE_IMAGE_ROI_XY':\n            const updateRoiDataXY = () => {\n                const index = state.findIndex(roi => roi.roi_id === action.roi_id)\n                const newstate = update(state, {\n                    [index]: {roi_data: {x: {$set: action.roi_new_x}, y: {$set: action.roi_new_y}}},\n                })\n                return newstate\n            }\n            return updateRoiDataXY()\n        case 'UPDATE_IMAGE_ROI_WH':\n            const updateRoiDataWH = () => {\n                const index = state.findIndex(roi => roi.roi_id === action.roi_id)\n                const newstate = update(state, {\n                    [index]: {roi_data: {width: {$set: action.roi_new_w}, height: {$set: action.roi_new_h}}},\n                })\n                return newstate\n            }\n            return updateRoiDataWH()\n        \n        case 'SET_ROI_DISPLAY':\n            const setRoiDisplay = () => {\n                const index = state.findIndex(roi => roi.roi_id === action.roi_id)\n                const newstate = update(state, {\n                    [index]: {display_roi: {$set: action.display_roi}},\n                })\n                return newstate\n            }\n            return setRoiDisplay()\n        \n        case 'REMOVE_ROI':\n            return(\n                [...state.slice(0, state.findIndex(roi => roi.roi_id === action.roi_id)),\n                 ...state.slice(state.findIndex(roi => roi.roi_id === action.roi_id) + 1)]\n            )\n\n        default:\n            return state\n    }\n}\n\nexport default imagerois","import update from 'immutability-helper'\n\n// State entry:\n//  {operation_name: \"<some_name>\" ,\n//   operation_properties: {\n//    type: \"<op_type>\"\n//    variables: {object containing variables represented as \"var_name\":value}  \n//  }}\n\nconst availableops = (state = [], action) => {\n    switch(action.type) {\n        case 'INITIALIZE_OPERATIONS':\n            const new_ops = []\n            for(const operation in action.available_ops_list){\n                if(!state.some(entry => entry.operation_name === operation)) {\n                    new_ops.push({'operation_name': operation, 'operation_properties':action.available_ops_list[operation]})\n                }\n            }\n            return(\n                [...state,\n                 ...new_ops]\n            )\n        case 'UPDATE_OPERATION':\n            let index_to_update = state.findIndex(op => op.operation_name === action.updated_operation.operation_name)\n            const updated_state = update(state, {\n                [index_to_update]: {operation_properties: {$set: action.updated_operation.operation_properties}}\n            })\n            return(updated_state)\n        default:\n            return state\n    }\n}\n\nexport default availableops","const serverroutine = (state = [], action) => {\n    switch(action.type){\n        case 'SET_NEW_ROUTINE':\n            return [ action.new_routine ]\n        case 'ADD_OPERATION':\n            const addOperation = (operation) => {\n                const updated_routine = state[0]\n                updated_routine.push(operation)\n                return(updated_routine)\n            }\n            return([ addOperation(action.operation) ])\n\n        case 'REMOVE_OPERATION':\n            const removeOperation = (index) => {\n                const updated_routine = [...state[0].slice(0, index), ...state[0].slice(index+1)]\n                return(updated_routine)\n            }\n\n            return([ removeOperation(action.index) ])\n\n        case 'CHANGE_OPERATION':\n            const updateOperation = (index, param, value) => {\n                const routine = state[0]\n                routine[index].params[param] = value\n                return(routine)\n            }\n\n            return([updateOperation(action.index, action.param, action.value)])\n\n        default:\n            return state\n    }\n}\n\nexport default serverroutine","import { combineReducers } from 'redux'\nimport datatree from './datatree'\nimport activeframes from './activeframes'\nimport loglist from './loglist'\nimport openwindows from './openwindows'\nimport imagerois from './imagerois'\nimport availableops from './availableops'\nimport serverroutine from './serverroutine'\n\nexport default combineReducers({\n    datatree,\n    activeframes,\n    loglist,\n    openwindows,\n    imagerois,\n    availableops,\n    serverroutine\n})","//export const SERVER_IP = 'http://127.0.0.1:8000/DataBrowse'\n//export const SERVER_IP_IMG = 'http://127.0.0.1:8000'\n\n//export const SERVER_IP = 'http://172.17.32.117:7000/DataBrowse'\n//export const SERVER_IP_IMG = 'http://172.17.32.117:7000'\n\nexport const SERVER_IP = '/DataBrowse'\nexport const SERVER_IP_IMG = ''\n\n\nfunction utilGenerateURIQuery(data) {\n    let esc = encodeURIComponent\n    let query = Object.keys(data)\n        .map(k => esc(k) + '=' + esc(data[k]))\n        .join('&')\n    return(query)\n  }\n\nasync function postData(url = '', data = {}) {\n    // taken from MDN site\n    // Default options are marked with * \n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport function getAllDataTree(wrapped_action) {\n    fetch(SERVER_IP + '/getdatatree/')\n        .then(response => response.json())\n        .then(data => { wrapped_action(data) })\n        .catch(err => console.log(err))\n}\n\nexport function getNewestID(wrapped_action) {\n    fetch(SERVER_IP + '/getnewestid/')\n        .then(response => response.json())\n        .then(data => { wrapped_action(data)})\n        .catch(err => console.log(err))\n}\n\nexport function fetchData(wrapped_action, selected_frames, group_by_iter = false) {\n    postData(SERVER_IP + '/fetchdata/', {'selected': selected_frames, 'group_by_iter': group_by_iter})\n        .then(data => {wrapped_action(data)})\n        .catch(err => console.log(err))\n}\n\nexport function fetchImg(wrapped_action, img_url) {\n    fetch(SERVER_IP_IMG + img_url)\n        .then(response => response.blob())\n        .then(images => {wrapped_action(URL.createObjectURL(images))})\n        .catch(err => console.log(err))\n}\n\nexport function fetchOps(wrapped_action) {\n    fetch(SERVER_IP + '/fetchOps/')\n        .then(response => response.json())\n        .then(data => { wrapped_action(data) })\n        .catch(err => console.log(err))\n}\n\nexport function dispatchOperation(ids_list, parameters, operation, add_log_action, update_results_action) {\n    add_log_action('Starting ' + operation + '...')\n    postData(SERVER_IP + '/do/', {'selected': ids_list, 'parameters': parameters, 'operation':operation})\n        .then(response => add_log_action(response))\n        .then(() => fetchData(update_results_action, ids_list))\n        .catch(err => console.log(err))\n}\n\nexport function fetchRoutine(wrapped_action) {\n    fetch(SERVER_IP + '/fetchRoutine/')\n        .then(response => response.json())\n        .then(data => wrapped_action(data))\n        .catch(err => console.log(err))\n}\n\nexport function uploadNewRoutine(new_routine, add_log_action) {\n    postData(SERVER_IP + '/setRoutine/', {'new_routine': new_routine})\n        .then(() => add_log_action('Routine updated'))\n        .catch(err => console.log(err))\n}\n","export const loadDataTree = new_data_tree => ({\n    type: 'LOAD_DATATREE',\n    new_data_tree\n})","export const setActiveFrames = active_frames_list => ({\n    type: 'SET_ACTIVE_FRAMES',\n    active_frames_list\n})\n\nexport const updateActiveFrames = frames_to_update => ({\n    type: 'UPDATE_ACTIVE_FRAMES',\n    frames_to_update\n})\n\nexport const addActiveFrame = new_frames => ({\n    type: 'ADD_ACTIVE_FRAMES',\n    new_frames\n})\n\nexport const removeActiveFrame = frame_to_remove => ({\n    type: 'REMOVE_ONE_OF_ACTIVE_FRAMES',\n    frame_to_remove\n})\n\nexport const setFocus = frame => ({\n    type: 'SET_FOCUS',\n    frame\n})\n\nexport const focusNext = frame => ({\n    type: 'FOCUS_NEXT',\n    frame\n})\n\nexport const focusPrevious = frame => ({\n    type: 'FOCUS_PREVIOUS',\n    frame\n})\n\nexport const clearFrames = () => ({\n    type: 'CLEAR_FRAMES'\n})","export const addLog = text => ({\n    type: 'ADD_LOG',\n    text\n})","export const addWindow = window_type => ({\n    type: 'ADD_WINDOW',\n    window_type\n})\n\nexport const removeWindow = id => ({\n    type: 'REMOVE_WINDOW',\n    id\n})\n\nexport const focusWindow = id => ({\n    type: 'FOCUS_WINDOW',\n    id\n})","export const addImageRoi = (roi_type, roi_data, display_roi) => ({\n    type: 'ADD_IMAGE_ROI',\n    roi_type,\n    roi_data,\n    display_roi\n})\n\nexport const updateImageRoiXY = (roi_id, roi_new_x, roi_new_y) => ({\n    type: 'UPDATE_IMAGE_ROI_XY',\n    roi_id,\n    roi_new_x,\n    roi_new_y\n})\n\nexport const updateImageRoiWH = (roi_id, roi_new_w, roi_new_h) => ({\n    type: 'UPDATE_IMAGE_ROI_WH',\n    roi_id,\n    roi_new_w,\n    roi_new_h\n})\n\nexport const setRoiDisplay = (roi_id, display_roi) => ({\n    type: 'SET_ROI_DISPLAY',\n    roi_id,\n    display_roi\n})\n\nexport const removeRoi = (roi_id) => ({\n    type: 'REMOVE_ROI',\n    roi_id\n})","export const setNewRoutine = (new_routine) => ({\n    type: 'SET_NEW_ROUTINE',\n    new_routine\n})\n\nexport const removeOperation = (index) => ({\n    type: 'REMOVE_OPERATION',\n    index\n})\n\nexport const addOperation = (operation) => ({\n    type: 'ADD_OPERATION',\n    operation\n})\n\nexport const updateOperation = (index, param, value) => ({\n    type: 'CHANGE_OPERATION',\n    index,\n    param,\n    value\n})\n\nexport default setNewRoutine","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getAllDataTree, fetchData } from '../../../../api'\nimport { loadDataTree, setActiveFrames } from '../../../../actions'\n\nimport DropdownTreeSelect from 'react-dropdown-tree-select'\nimport 'react-dropdown-tree-select/dist/styles.css'\nimport './DataTree.css'\n\n\nfunction extractNodesFromInternalIDs(ids_list, state) {\n    let nodes = []\n\n    for(let id_i in ids_list){\n        let extracted_id = ids_list[id_i]._id\n        let address = extracted_id.split('-')\n\n        address.shift()\n        address = address.map(i=>(Number(i)))\n        let last_add = address.pop()\n\n        let node = state\n\n        for(let l in address) {\n            node = node[address[l]].children\n        }\n        node = node[last_add]\n        \n        nodes.push(node)\n    }\n    return(nodes)\n}\n\n\nfunction getFramesIDsFromTree(nodes_list) {\n    let IDs = []\n    for(let node_i in nodes_list) {\n        if(nodes_list[node_i].hasOwnProperty('value')){\n            IDs.push(Number(nodes_list[node_i].value))\n        } else {\n            IDs.push(...getFramesIDsFromTree(nodes_list[node_i].children))\n        }\n    }\n    return IDs\n}\n\n\nconst findMaxZIndex = (state) => {\n    let maxZ = 0\n    for(const window of state){\n        if(maxZ<window.z_index){\n            maxZ = window.z_index\n        }\n    }\n    return(maxZ + 1)\n}\n\n\nconst DataTree = () => {\n    const data = useSelector(state => state.datatree)\n    const dispatch = useDispatch()\n\n    const top_z_index = useSelector(state => findMaxZIndex(state.openwindows))\n\n    function onFocus() {\n        getAllDataTree(retrieved_data=>{dispatch(loadDataTree(retrieved_data))})\n    }\n\n    function onChange (currentNode, selectedNodes) {\n        let selected_nodes = extractNodesFromInternalIDs(selectedNodes, data)\n        fetchData(data => {dispatch(setActiveFrames(data))}, getFramesIDsFromTree(selected_nodes), true)\n       }\n\n    return(\n        <div className = 'DataTree' style={{zIndex: top_z_index}}>\n            <DropdownTreeSelect \n                data={data} \n                onChange={onChange}\n                onFocus={onFocus} \n                keepTreeOnSearch={true} \n                showPartiallySelected={true} \n                texts={{placeholder:'Select frames...'}}/>\n        </div>\n    )\n}\n\nexport default DataTree","import React, { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { getNewestID, fetchData } from '../../../../api'\nimport { addActiveFrame, addLog } from '../../../../actions'\nimport './NewDataWatcher.css'\n\nconst NewDataWatcher = () => {\n    const dispatch = useDispatch()\n    const [last_newest_id, setLastId] = useState(0)\n    const [checked, toggleChecked] = useState(false)\n    const [newest_id, setNewNewestId] = useState(0)\n\n    function handleChange() {\n        if(!checked) {\n            dispatch(addLog(\"Watching for new frames...\"))\n            getNewestID(new_id => {setNewNewestId(new_id)\n                                   setLastId(new_id)})\n        }\n        toggleChecked(!checked)\n    }\n\n    function addNewFrame (checked, newest_id, last_newest_id) {\n        // this function operates under an assumption that data frames are stored on the server with ids\n        // represented as following integers. It means for example that when newest_id is 5, and \n        // last_newest_id is 3 the UI has to ask for frames with id 4 and id 5 to get all new data\n        if(checked) {\n            getNewestID(new_id => {setNewNewestId(new_id)})\n            if(last_newest_id !== newest_id) {\n                dispatch(addLog('Detected new frame(s)!'))\n                var requested_ids = []\n                for(var i = last_newest_id + 1; i <= newest_id; i++) {\n                    requested_ids.push(i)\n                }\n                setLastId(newest_id)\n                fetchData(data => {dispatch(addActiveFrame(data))}, requested_ids)\n            }\n        }\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n          addNewFrame(checked, newest_id, last_newest_id)\n        }, 500)\n        return () => clearInterval(interval)\n      }, [checked, newest_id, last_newest_id])\n\n    return(\n        <div className=\"NewDataWatcher\" active={checked.toString()} onClick={()=>handleChange()}>\n            <div className='displaytext'>\n                Loading new frames: {String(checked)}\n            </div>\n        </div>\n    )\n}\n\nexport default NewDataWatcher","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addWindow } from '../../../../actions'\nimport './AddWindowSelection.css'\n\n\nconst findMaxZIndex = (state) => {\n    let maxZ = 0\n    for(const window of state){\n        if(maxZ<window.z_index){\n            maxZ = window.z_index\n        }\n    }\n    return(maxZ + 1)\n}\n\n\nconst AddWindowSelection = () => {\n    const dispatch = useDispatch()\n\n    const top_z_index = useSelector(state => findMaxZIndex(state.openwindows))\n    \n    return(\n        <div className=\"AddWindowSelection\">\n            <div className=\"dropdown\">Add new window {'\\u25BC'}</div>\n                <div className=\"dropdown-content\" style={{zIndex : top_z_index}}>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('SelectedFrames'))}>Selected frames</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('LogList'))}>Application logs</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('AttributesList'))}>Attributes list</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('ImageDisplayer'))}>Image displayer</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('ROIs'))}>Display ROIs</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('RoiManager'))}>ROIs manager</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('ChartDisplayer'))}>Graph displayer</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('CSVDisplayer'))}>CSV displayer</div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddWindowSelection\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { SERVER_IP } from '../../../../api'\nimport './FileDownloader.css'\n\nconst FileDownloader = () => {\n    const active_frames = useSelector(state => state.activeframes)\n\n    const extractIds = (acc, cur) => {\n        let temp_list = []\n        const data_frames = cur.data_frames\n        if(data_frames !== undefined) {\n            for(const frame of data_frames){\n                temp_list.push(frame.id)\n            }\n        }\n        return(acc.concat(temp_list))\n    }\n\n    const frames_ids = active_frames.reduce((acc, cur) => extractIds(acc, cur), [])\n\n    const handleSubmitCommand = (e) => {\n        const r = window.confirm('Zipping files might take a while. Click OK to proceed')\n        if(!r){\n            e.preventDefault();\n        }\n    }\n\n    return(\n        <div className='FileDownloader'>\n            <form action={SERVER_IP + '/download/'} method=\"post\" id=\"formdownload\" onSubmit={(e) => handleSubmitCommand(e)}>\n                <input id=\"container_for_ids\" type=\"hidden\" name=\"ids\" value={[JSON.stringify(frames_ids)]} />\n                <button type='submit'>Download</button>\n            </form>\n        </div>\n    )\n\n}\n\nexport default FileDownloader","import React from 'react'\n\n\nconst Variable = ({variable, value, handleValueChange}) => {\n    return(\n        <div className='Variable'>\n            <label>{variable + ': '}</label>\n            <input type='text' defaultValue={value} onChange={(event)=>handleValueChange(event.target.value)}></input>\n            <br />\n        </div>\n    )\n}\n\nexport default Variable","import React, { useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateOperation } from '../../../../actions'\n\nconst renderRoiOptions = (rois) => {\n    const options = []\n    for(const roi of rois) {\n        for(const param in roi.roi_data){\n        options.push(<option value={roi.roi_data[param]} key={'ID ' + roi.roi_id+'; ' + param}>{'ID ' + roi.roi_id+'; ' + param}</option>)\n        }\n    }\n    return(options)\n}\n\n\nconst VariableDesigner = ({index, param_name, value}) => {\n    const dispatch = useDispatch()\n    const available_rois = useSelector(state => state.imagerois)\n\n    const handleRoiSelection = (value) => {\n        if(value !== 'INIT') {\n            dispatch(updateOperation(index, param_name, value))\n        }\n    }   \n\n    return(\n        <div className='VariableDesigner'>\n            <label>{param_name + ': '}</label> \n            <input defaultValue={value} \n                   type=\"text\" \n                   onChange={(event)=>dispatch(updateOperation(index, param_name, event.target.value))}></input>\n            <select onChange={(event)=>handleRoiSelection(event.target.value)}>\n                <option value='INIT'> Select ROI</option>\n                {renderRoiOptions(available_rois)}\n            </select>\n        </div>\n    )\n}\n\nexport default VariableDesigner","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { removeOperation } from '../../../../actions'\nimport VariableDesigner from './VariableDesigner'\n\n\nconst Operation = ({operation, index}) => {\n    const dispatch = useDispatch()\n\n    const renderVariables = () => {\n        const vars_list = []\n        for(const variable in operation.params){\n            vars_list.push(<VariableDesigner key={variable} index={index} param_name={variable} value={operation.params[variable]} />)\n        }\n        return(vars_list)\n    }\n\n    return(\n        <div className='Operation'>\n            <div>\n                {operation.operation} <button className='close' onClick={()=>dispatch(removeOperation(index))}>{'\\u2715'}</button>\n            </div>\n            <div>\n                {renderVariables()}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Operation","import React , { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Operation from './Operation'\nimport { addOperation, addLog } from '../../../../actions'\nimport { uploadNewRoutine } from '../../../../api'\n\nconst renderOperationsForRoutine = (routine) => {\n    const operations_list = []\n    for(const [i, operation] of routine.entries()) {\n        operations_list.push(<Operation operation={operation} index={i} key={i} />)\n    }\n    return(operations_list)\n}\n\nconst formatOperationForRoutine = (operation) => {\n    return({'operation': operation.operation_name, 'params':operation.operation_properties.variables})\n} \n\nconst renderOptionsForOperationSelection = (ops) => {\n    const ops_list = []\n    for(const op of ops){\n        ops_list.push(<option value={JSON.stringify(formatOperationForRoutine(op))} key={op.operation_name}>{op.operation_name}</option>)\n    }\n    return ops_list\n}\n\n\nconst RoutinesDesigner = () => {\n    const dispatch = useDispatch()\n\n    const routine = useSelector(state => state.serverroutine)[0]\n    const avail_ops = useSelector(state => state.availableops)\n\n    const [selected_operation, setSelectedOperation] = useState('INIT')\n\n    const addSelectedOperation = (operation) => {\n        if(operation !== 'INIT') {\n            dispatch(addOperation(JSON.parse(operation)))\n        }\n    }\n\n    return(\n        <div>\n            <div>\n                <select value={selected_operation} onChange={(e) => setSelectedOperation(e.target.value)}>\n                    <option value='INIT'>Select operation</option>\n                    {renderOptionsForOperationSelection(avail_ops)}\n                </select>\n                <button onClick={()=>addSelectedOperation(selected_operation)}>Add operation</button>\n            </div>\n            <div>\n                {renderOperationsForRoutine(routine)}\n            </div>\n            <div className='UploadNewRoutineSpace'>\n                <button onClick={()=>uploadNewRoutine(routine, (text)=>dispatch(addLog(text)))}>Upload new routine</button>\n            </div>\n        </div>\n    )\n}\n\nexport default RoutinesDesigner","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchOps, dispatchOperation, fetchRoutine } from '../../../../api'\nimport { updateActiveFrames, addLog, setNewRoutine} from '../../../../actions'\nimport { initializeOps } from '../../../../actions'\nimport './OperationsMenu.css'\nimport  Modal  from 'react-modal'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\nimport 'react-tabs/style/react-tabs.css'\nimport Variable from './Variable'\nimport RoutinesDesigner from './RoutinesDesigner'\n\nModal.setAppElement('#root')\n\nlet customStyles = {\n    content : {\n      top                   : '40%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)',\n      fontFamily            : 'Arial, Helvetica, sans-serif',\n      background            : '#f4f4f4'  \n      \n    },\n    overlay : {\n        backgroundColor: 'rgba(0,0,0,0.4)',\n        zIndex : 1\n    }\n}\n\nconst findMaxZIndex = (state) => {\n    let maxZ = 0\n    for(const window of state){\n        if(maxZ<window.z_index){\n            maxZ = window.z_index\n        }\n    }\n    return(maxZ + 1)\n}\n\nconst renderOperationOption = (operation) => {\n    const op_name = operation.operation_name\n    return(<option key={op_name} value={op_name}>{op_name}</option>)\n}\n\nconst renderGroupOption = (group_name) => {\n    return(<option key={group_name} value={group_name}>{group_name}</option>)\n}\n\nconst findFocussedIterationIDS = (frames, dev_name) => {\n    const focussed_iteration = frames.find(iteration => iteration.focussed === true)\n    if(focussed_iteration === undefined) {\n        return([])\n    }\n    let ids_list = []\n    for(const frame of focussed_iteration.data_frames) {\n        if(dev_name === 'ALL') {\n            ids_list.push(frame.id)\n        } else {\n            if(frame.data.data_source === dev_name){\n                ids_list.push(frame.id)\n            }\n        }\n    }\n    return(ids_list)\n}\n\nconst findFramesForGroup = (frames, group_name, dev_name) => {\n    let frames_list = []\n    for(const iteration of frames){\n        for(const frame of iteration.data_frames){\n            if(dev_name === 'ALL'){\n                if(frame.data.sequence_name === group_name){\n                    frames_list.push(frame.id)\n                }\n            } else {\n                if(frame.data.sequence_name === group_name && frame.data.data_source === dev_name) {\n                    frames_list.push(frame.id)\n                }\n            }\n        }\n    }\n    return(frames_list)\n}\n\nconst findDifferentFramesGroups = (frames) => {\n    const frames_groups = []\n    for(const iteration of frames){\n        for(const frame of iteration.data_frames) {\n            if(!frames_groups.includes(frame.data.sequence_name)) {\n                frames_groups.push(frame.data.sequence_name)\n            }\n        }\n    }\n    return(frames_groups)\n}\n\nconst extractIds = (active_frames, group_name, dev_name) => {\n    if(group_name === 'FOCUSSED') {\n        return(findFocussedIterationIDS(active_frames, dev_name))\n    } else {\n        return(findFramesForGroup(active_frames, group_name, dev_name))\n    }\n}\n\nconst extractParameters = (operation_in, roi_in) => {\n    const operation = (operation_in.hasOwnProperty('operation_properties')) ? operation_in : {'operation_properties':{'variables':{}}}\n    const roi = (roi_in === undefined) ? {'roi_data':{}} : roi_in\n    const extracted_params = {}\n    for(const variable in operation.operation_properties.variables) {\n        if(roi.roi_data.hasOwnProperty(variable)){\n            extracted_params[variable] = roi.roi_data[variable]\n        } else {\n            extracted_params[variable] = operation.operation_properties.variables[variable]\n        }\n    }\n    return(extracted_params)\n}\n\nconst findAvailableDevices = (frames_list) => {\n    let devices_names_list = []\n    for(let iteration of frames_list) {\n        for(let frame of iteration.data_frames) {\n            let temp_name = frame.data.data_source\n            if(!devices_names_list.includes(temp_name)) {\n                devices_names_list.push(temp_name)\n            }\n        }\n    }\n    return(devices_names_list)\n}\n\nconst OperationsMenu = () => {\n    const dispatch = useDispatch()\n\n    const [show, setShow] = useState(false)\n    const handleClose = () => setShow(false)\n    const handleShow = () => {\n        fetchRoutine(data => dispatch(setNewRoutine(data)))\n        fetchOps(data => dispatch(initializeOps(data)))\n        setShow(true)\n    }\n\n    const top_z_index = useSelector(state => findMaxZIndex(state.openwindows))\n    customStyles.overlay.zIndex = top_z_index\n\n    const available_operations = useSelector(state => state.availableops)\n    const active_frames = useSelector(state => state.activeframes)\n    const frames_groups = findDifferentFramesGroups(active_frames)\n    const available_devices = findAvailableDevices(active_frames)\n    const [selected_group, setSelectedGroup] = useState('FOCUSSED')\n    const [selected_device, setSelectedDevice] = useState('ALL')\n\n    const [selected_op_object, setSelectedOpObj] = useState({})\n    const [selected_op_name, setSelectedOp] = useState('INIT')\n\n    const available_rois = useSelector(state => state.imagerois)\n    const [selected_roi, setSelectedRoi] = useState('INIT')\n\n    const handleOperationSelection = (op_name) => {\n        setSelectedOp(op_name)\n        setSelectedOpObj(available_operations.find(op=>op.operation_name === op_name))\n    }\n\n    const prepareTailoredSetSelectedOpObj = (obj, variable, value) => {\n        const newobj = obj\n        newobj.operation_properties.variables[variable] = value\n        setSelectedOpObj(newobj)\n    }\n\n    const renderParamsForOperation = (operation, roi_in) => {\n        const rendered_variables = []\n        const roi = (roi_in === undefined) ? {}:roi_in\n        try {\n        for(const variable in operation.operation_properties.variables){\n            if(roi.hasOwnProperty('roi_data')){\n            if(!roi.roi_data.hasOwnProperty(variable)){\n                rendered_variables.push(<Variable variable={variable} \n                value={operation.operation_properties.variables[variable]}\n                handleValueChange={(value) => prepareTailoredSetSelectedOpObj(selected_op_object, variable, value)} \n                key={variable}></Variable>)\n            }} else {\n                rendered_variables.push(<Variable variable={variable} \n                value={operation.operation_properties.variables[variable]}\n                handleValueChange={(value) => prepareTailoredSetSelectedOpObj(selected_op_object, variable, value)} \n                key={variable}></Variable>)\n            }\n        }   \n        } catch (error) {\n            return(<h4>Select operation</h4>)\n        }\n        return(rendered_variables)\n    }\n\n    return(\n        <div className=\"OperationsMenuButton\">\n            <button onClick={()=>handleShow(true)}>Operations menu</button>\n            <Modal isOpen={show} \n                   style={customStyles}\n                   shouldCloseOnOverlayClick={true}\n                   onRequestClose={()=>handleClose(false)}\n            > \n            <Tabs>\n                <TabList>\n                    <Tab>Dispatch operation</Tab>\n                    <Tab>Routines designer</Tab>\n                </TabList>\n                <TabPanel>\n                <div>\n                    <h2>Operations Menu</h2>\n                    <h3>Selected frames</h3>\n                    <select value={selected_device} onChange={event=>setSelectedDevice(event.target.value)}>\n                        <option key='ALL' value='ALL'>All devices</option>\n                        {available_devices.map(dev_name => renderGroupOption(dev_name))}\n                    </select>\n                    <select value={selected_group} onChange={event=>setSelectedGroup(event.target.value)}>\n                        <option key='FOCUSSED' value='FOCUSSED'>Currently focussed frame</option>\n                        {frames_groups.map(group_name => renderGroupOption(group_name))}\n                    </select>\n                    <h3>Operation options</h3>\n                    <select value={selected_op_name} onChange={event=>handleOperationSelection(event.target.value)}>\n                        <option key='INIT' value='INIT'> Select operation</option>\n                        {available_operations.map(operation => renderOperationOption(operation))}\n                    </select> <br />\n                    bind to ROI:\n                    <select value={selected_roi} onChange={event=>setSelectedRoi(event.target.value)}>\n                        <option value={'INIT'}> Nothing </option>\n                        {available_rois.map(roi=><option key={roi.roi_id} value={roi.roi_id}>ID: {roi.roi_id}</option>)}\n                    </select>\n                    {renderParamsForOperation(selected_op_object, available_rois.find((roi)=>(roi.roi_id == selected_roi)))}\n                </div>\n                <div>\n                    <button onClick={()=>{\n                        if(selected_op_name!=='INIT'){\n                            dispatchOperation(extractIds(active_frames, selected_group, selected_device),\n                                              extractParameters(selected_op_object, available_rois.find((roi)=>(roi.roi_id == selected_roi))),\n                                              selected_op_name,\n                                              data=>dispatch(addLog(data)),\n                                              data=>dispatch(updateActiveFrames(data)))}}\n                        }>Dispatch!</button>\n                </div>\n                </TabPanel>\n                <TabPanel>\n                    <RoutinesDesigner />\n                </TabPanel>\n            </Tabs>  \n\n            </Modal>\n        </div>\n    )\n}\n\nexport default OperationsMenu","export const initializeOps = available_ops_list => ({\n    type: 'INITIALIZE_OPERATIONS',\n    available_ops_list\n})\n\nexport const updateOp = updated_operation => ({\n    type: 'UPDATE_OPERATION',\n    updated_operation\n})","import React from 'react'\nimport { DataTree, NewDataWatcher, AddWindowSelection, FileDownloader, OperationsMenu } from './components'\nimport './MenuBar.css'\n\nconst MenuBar = () => {\n    return(\n        <div className='MenuBar'>\n            <DataTree />\n            <FileDownloader />\n            <NewDataWatcher />\n            <OperationsMenu />\n            <AddWindowSelection />\n        </div>\n    )\n}\n\nexport default MenuBar","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Rnd } from 'react-rnd'\nimport { removeWindow, focusWindow } from '../../../../actions'\nimport './WindowWrapper.css'\n\nconst WindowWrapper = (props) => {\n    const dispatch = useDispatch()\n\n    return(\n        <Rnd bounds='.WorkSpace'\n            className='WindowWrapper'\n            dragHandleClassName = 'header'\n            resizeGrid = {[20,20]}\n            dragGrid = {[20,20]}\n            default={{x:0, y:0, width: props.default_width, height: props.default_height}}\n            lockAspectRatio={props.lock_aspect_ratio}\n            enableResizing={props.resizable}\n            onDragStart={()=>dispatch(focusWindow(props.id))}\n            onClick={()=>dispatch(focusWindow(props.id))}\n            style={{zIndex: props.z_index}}\n        >\n            <div className='header'>\n                <div className='header-name'>\n                    {props.window_name}\n                </div>\n                <div className='header-close' onClick={()=>dispatch(removeWindow(props.id))}>\n                    {'\\u2715'}\n                </div>\n            </div>\n            {props.children}\n        </Rnd>\n    )\n}\n\nexport default WindowWrapper","import React from 'react'\nimport { removeActiveFrame, setFocus } from '../../../../actions'\nimport { useDispatch } from 'react-redux'\nimport './DataTile.css'\nimport { SERVER_IP_IMG } from '../../../../api'\n\n\nconst prepareImgUrl = (iter_frame, source_device, source_result) => {\n    let url = ''\n    try{\n        let frame_index_in_iteration = iter_frame.data_frames.findIndex((frame) => (frame.data.data_source == source_device))\n        url = iter_frame.data_frames[frame_index_in_iteration].data.results[source_result].value\n        url = SERVER_IP_IMG + url\n    }\n    catch(e)\n    {\n        url = SERVER_IP_IMG + '/static/DataBrowse/img/no_img.png'\n    }\n    return(url)\n}\n\n\nconst DataTile = ({ iter_frame, img_source_device, img_source_result }) => {\n    const dispatch = useDispatch()\n    return(\n        <div className=\"DataTile\" \n             focussed={iter_frame.focussed.toString()} >\n            <div className=\"TileContent\" onClick={()=>dispatch(setFocus(iter_frame))}>\n                <img className=\"TileImage\" src={prepareImgUrl(iter_frame, img_source_device, img_source_result)} \n                                           height={70} \n                                           width={70}/>\n                    {iter_frame.data_frames[0].data.sequence_name}\n                <div className='FileList'>\n                    Files' sources in this iteration:\n                    {iter_frame.data_frames.map((data_element) => {\n                        return(<div key = {data_element.id}> {data_element.data.data_source} </div>)\n                    })}\n                </div>\n            </div>\n            \n            <div className=\"close\" onClick={()=>dispatch(removeActiveFrame(iter_frame))}>\n            {'\\u2715'}\n            </div>\n        </div>\n        \n    )\n}\n\nexport default DataTile\n","import React from 'react'\nimport './NavigButtons.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { focusPrevious, focusNext, clearFrames } from '../../../../actions'\n\nconst NavigButtons = () => {\n    const dispatch = useDispatch()\n\n    const active_frames = useSelector(state => state.activeframes)\n    const frame_focussed = active_frames.find(frame => frame.focussed === true)\n\n    return (\n        <div className={'NavigButtons'}>\n            <button className={'NavigButton'} onClick={()=>dispatch(focusPrevious(frame_focussed))}> {'\\u25C0'} </button>\n            <button className={'NavigButton'} onClick={()=>dispatch(clearFrames())}> Clear </button>\n            <button className={'NavigButton'} onClick={()=>dispatch(focusNext(frame_focussed))}> {'\\u25B6'} </button>\n        </div>\n    )\n}\n\nexport default NavigButtons","import React, { useEffect, useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport DataTile from './DataTile'\nimport NavigButtons from './NavigButtons'\nimport './SelectedFramesList.css'\n\n\nconst scrollToRef = (ref, spaceRef) => {\n    if(ref.current !== null){\n        const offset = ref.current.offsetTop - spaceRef.current.scrollTop\n        if(offset > spaceRef.current.clientHeight || offset < 0) {\n            spaceRef.current.scrollTo(0, ref.current.offsetTop - 100)\n        }\n    }\n}\n\n\nconst findAvailableDevices = (frames_list) => {\n    let devices_names_list = []\n    for(let iteration of frames_list) {\n        for(let frame of iteration.data_frames) {\n            let temp_name = frame.data.data_source\n            if(!devices_names_list.includes(temp_name)) {\n                devices_names_list.push(temp_name)\n            }\n        }\n    }\n    return(devices_names_list)\n}\n\nconst findAvailableIMGResults = (device_name, frames_list) => {\n    let results_names_list = []\n    for(let iteration of frames_list) {\n        for(let frame of iteration.data_frames) {\n            for(let result in frame.data.results) {\n                if(frame.data.results[result].type === 'IMG' && frame.data.data_source === device_name) {\n                    if(! results_names_list.includes(result)){\n                        results_names_list.push(result)\n                    }\n                }\n            }\n        }\n    }\n    return(results_names_list)\n}\n\n\nconst SelectedFramesList = () => {\n    const active_iterations = useSelector(state => state.activeframes)\n    const iter_focussed = active_iterations.find(iter => iter.focussed === true)\n\n    const tileRef = useRef(null)\n    const spaceRef = useRef(null)\n\n    useEffect(() => scrollToRef(tileRef, spaceRef))\n\n    const [selected_device, setSelectedDevice] = useState('INIT')\n    const [selected_result, setSelectedResult] = useState('INIT')\n    const available_devices = findAvailableDevices(active_iterations)\n    const available_IMG_results = findAvailableIMGResults(selected_device, active_iterations)\n\n    return(\n        <div className=\"SelectedFramesList\">\n            <NavigButtons />\n            <div className='SourceSelection'>\n            <select value={selected_device} onChange={event=>setSelectedDevice(event.target.value)}>\n                <option value={'INIT'}>Select device</option>\n                {available_devices.map((device_name, index) => (<option key={index} value={device_name}>{device_name}</option>))}\n            </select>\n            <select value={selected_result} onChange={event=>setSelectedResult(event.target.value)}>\n                <option value={'INIT'}>Select result</option>\n                {available_IMG_results.map((result_name, index) => (<option key={index} value={result_name}>{result_name}</option>))}\n            </select>\n            </div>\n            <div className='TilesSpace' ref={spaceRef}>\n                {active_iterations.map((iteration) => {\n                    if(iteration.iter_token === iter_focussed.iter_token) {\n                        //PASS THE REFERENCE INTO THE DATATILE!!!!\n                        return(<div ref={tileRef} key={iteration.iter_token}><DataTile key={iteration.iter_token} \n                                                                                       iter_frame={iteration}\n                                                                                       img_source_device={selected_device}\n                                                                                       img_source_result={selected_result}/></div>)\n                    } else {\n                        return(<div key={iteration.iter_token}><DataTile key={iteration.iter_token} \n                                                                         iter_frame={iteration}\n                                                                         img_source_device={selected_device}\n                                                                         img_source_result={selected_result}/></div>)\n                    }\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default SelectedFramesList","import React, { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport './LogList.css'\n\nconst LogList = () => {\n    const logs = useSelector(state => state.loglist)\n    const ref = React.createRef()\n    useEffect(()=>{ref.current.scrollTop = ref.current.scrollHeight})\n    return(\n        <div className='Console' ref={ref}>\n            <ul>\n                {logs.map((log, index) => (<li key={log + index}>{log}</li>))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LogList","import React from 'react'\n\nconst renderCell = (obj) => {\n    if(obj !== undefined){\n        return(<td>{obj}</td>)\n    }\n    else\n        return('')\n}\n\nconst Attribute = ({props}) => {\n    return(\n        <tr>\n            {renderCell(props.name)}\n            {renderCell(props.type)}\n            {renderCell(props.value)}\n        </tr>\n    )\n}\n\nexport default Attribute","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport  Attribute  from './Attribute'\nimport './FrameAttributes.css'\n\n\nconst findAvailableDevices = (iteration) => {\n    let devices_names_list = []\n    if(iteration !== undefined){\n        for(let device of iteration.data_frames) {\n            let temp_name = device.data.data_source\n               if(!devices_names_list.includes(temp_name)) {\n                   devices_names_list.push(temp_name)\n               }\n        }\n    }\n    return(devices_names_list)\n}\n\n\nconst FrameAttributesList = () => {\n    const selected_iter_frames = useSelector(state => state.activeframes).find(iter => iter.focussed === true)\n    const available_devices = findAvailableDevices(selected_iter_frames)\n\n    const parseIteration = (iter, selection, device) => {\n        if(iter === undefined || device === 'INIT') {\n            return []\n        }\n        else {\n            let parsed = []\n            let selected_device_index = iter.data_frames.findIndex(frame => frame.data.data_source === device)\n            if(selected_device_index === -1) {\n                return []\n            }\n            let selected_data = (selection === 'PROPS')? \n                iter.data_frames[selected_device_index].data.properties : iter.data_frames[selected_device_index].data.results\n            for(let item in selected_data){\n                if(selection === 'RES'){\n                    parsed.push({name: item, type: selected_data[item].type, value: selected_data[item].value})\n                }\n                else {\n                    parsed.push({name: item, value: selected_data[item]})\n                }\n            }\n            return parsed\n        }\n    }\n\n    const [selected_option, setSelectedOption] = useState('PROPS')\n    const [selected_device, setSelectedDevice] = useState('INIT')\n\n\n    const renderPreamble = () => {\n        if(selected_option === 'RES') {\n            return(\n                <tr>\n                    <th>\n                        Result Name\n                    </th>\n                    <th>\n                        Result Type\n                    </th>\n                    <th>\n                        Result Value\n                    </th>\n                </tr>\n            )\n        } else {\n            return(\n                <tr>\n                    <th>\n                        Property Name\n                    </th>\n                    <th>\n                        Property Value\n                    </th>\n                </tr>\n            )\n            \n        }\n    }\n\n    return(\n        <div className=\"FrameAttributesList\">\n            <label>\n            Display: \n            <select value={selected_device} onChange={event=>setSelectedDevice(event.target.value)}>\n                <option value={'INIT'}>Select device</option>\n                {available_devices.map((dev_name, index)=>(<option key={index} value={dev_name}>{dev_name}</option>))}\n            </select>\n            <select value={selected_option} onChange={event=>setSelectedOption(event.target.value)}>\n                <option value={'PROPS'}>Properties</option>\n                <option value={'RES'}>Results</option>\n            </select>\n            </label>\n            <div className='tableSpace'>\n            <table>\n                <tbody>\n                    {renderPreamble()}\n                    {parseIteration(selected_iter_frames, selected_option, selected_device)\n                        .map((attribute, index) => (<Attribute key={index} props={attribute} />))}\n                </tbody>\n            </table>\n            </div>\n        </div>\n    )\n}\n\n\nexport default FrameAttributesList","import React from 'react'\nimport { SERVER_IP_IMG } from '../../../../api'\n\n\nconst prepareImgUrl = (iter_frame, result, device) => {\n    let url = ''\n    try{\n        let dev_index = iter_frame.data_frames.findIndex(frame=>frame.data.data_source === device)\n        url = iter_frame.data_frames[dev_index].data.results[result].value\n        url = SERVER_IP_IMG + url\n    }\n    catch(e)\n    {\n        url = SERVER_IP_IMG + '/static/DataBrowse/img/no_img.png'\n    }\n    return(url)\n}\n\n\nconst ImageSpace = (props) => {\n    return(\n             <img className='SelectedImage' src={prepareImgUrl(props.iter_frame, props.result, props.device)} />\n    )\n\n}\n\nexport default ImageSpace","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux' \nimport ImageSpace from './ImageSpace'\nimport './ImageDisplayer.css'\n\n\nconst getAvailableDevices = (frames_list) => {\n    let devices_names_list = []\n    if(frames_list !== undefined){\n        for(let frame of frames_list.data_frames) {\n            let temp_name = frame.data.data_source\n            if(!devices_names_list.includes(temp_name)) {\n                devices_names_list.push(temp_name)\n            }\n        }\n    }\n    return(devices_names_list)\n}\n\nconst getAvailableResults = (selected_iteration, selected_device) => {\n    let results = []\n    if(selected_iteration !== undefined){\n        let device_index = selected_iteration.data_frames.findIndex(frame=>frame.data.data_source === selected_device)\n        if(device_index === -1) {\n            return ['None']\n        }\n        for(let result in selected_iteration.data_frames[device_index].data.results){\n            if(selected_iteration.data_frames[device_index].data.results[result].type === 'IMG'){\n                results.push(result)\n            }\n        }\n    } else {\n        results.push('None')\n    }\n\n    return results\n}\n\nconst ImageDisplayer = () => {\n    const selected_iteration = useSelector(state => state.activeframes).find(iteration => iteration.focussed === true)\n    \n    const [selected_device, setSelectedDevice] = useState('INIT')\n    const [selected_result, setSelectedResult] = useState('INIT')\n\n    const avail_devices = getAvailableDevices(selected_iteration)\n\n    const avail_img_results = getAvailableResults(selected_iteration, selected_device)\n\n    return(\n    <div className='ImageDisplayer'>\n        <div className ='ResultSelect'>\n        <select  value={selected_device} onChange={event=>setSelectedDevice(event.target.value)}>\n            <option value={'INIT'}>Select device</option>\n            {avail_devices.map((device, index) => (<option key={index} value={device}>{device}</option>))}\n        </select>\n        <select  value={selected_result} onChange={event=>setSelectedResult(event.target.value)}>\n            <option value={'INIT'}>Select result to show</option>\n            {avail_img_results.map((result, index) => (<option key={index} value={result}>{result}</option>))}\n        </select>\n        </div>\n\n        <ImageSpace iter_frame={selected_iteration} result={selected_result} device={selected_device}/>\n    </div>\n    )\n}\n\nexport default ImageDisplayer","import React from 'react'\nimport { SERVER_IP_IMG } from '../../../../../api'\n\n\nconst prepareImgUrl = (iter_frame, result, device) => {\n    let url = ''\n    try{\n        let dev_index = iter_frame.data_frames.findIndex(frame=>frame.data.data_source === device)\n        url = iter_frame.data_frames[dev_index].data.results[result].value\n        url = SERVER_IP_IMG + url\n    }\n    catch(e)\n    {\n        url = SERVER_IP_IMG + '/static/DataBrowse/img/no_img.png'\n    }\n    return(url)\n}\n\nconst ImageSpaceRoi = (props) => {\n\n    return(\n        <div className='SelectedImageRoi'>\n             <img className='ImageRoi' src={prepareImgUrl(props.iter_frame, props.result, props.device)} \n                  onLoad={(e)=>props.imgOnload(e.target.naturalWidth, e.target.naturalHeight)}/>\n             {props.children}\n        </div>\n       \n    )\n\n}\n\nexport default ImageSpaceRoi","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux' \nimport ImageSpaceRoi from './ImageSpaceRoi'\nimport './ImageDisplayerRoi.css'\n\n\nconst getAvailableDevices = (frames_list) => {\n    let devices_names_list = []\n    if(frames_list !== undefined){\n        for(let frame of frames_list.data_frames) {\n            let temp_name = frame.data.data_source\n            if(!devices_names_list.includes(temp_name)) {\n                devices_names_list.push(temp_name)\n            }\n        }\n    }\n    return(devices_names_list)\n}\n\n\nconst getAvailableResults = (selected_iteration, selected_device) => {\n    let results = []\n    if(selected_iteration !== undefined){\n        let device_index = selected_iteration.data_frames.findIndex(frame=>frame.data.data_source === selected_device)\n        if(device_index === -1) {\n            return ['None']\n        }\n        for(let result in selected_iteration.data_frames[device_index].data.results){\n            if(selected_iteration.data_frames[device_index].data.results[result].type === 'IMG'){\n                results.push(result)\n            }\n        }\n    } else {\n        results.push('None')\n    }\n\n    return results\n}\n\n\nconst ImageDisplayerRoi = (props) => {\n    const selected_iteration = useSelector(state => state.activeframes).find(iteration => iteration.focussed === true)\n\n    const [selected_device, setSelectedDevice] = useState('INIT')\n    const [selected_result, setSelectedResult] = useState('INIT')\n    \n    const avail_devices = getAvailableDevices(selected_iteration)\n    const avail_img_results = getAvailableResults(selected_iteration, selected_device)\n    \n    return(\n    <div className='ImageDisplayerRoi'>\n        <div className ='ResultSelect'>\n            <select  value={selected_device} onChange={event=>setSelectedDevice(event.target.value)}>\n                <option value={'INIT'}>Select device</option>\n                {avail_devices.map((device, index) => (<option key={index} value={device}>{device}</option>))}\n            </select>\n            <select  value={selected_result} onChange={event=>setSelectedResult(event.target.value)}>\n                <option value={'INIT'}>Select result to show</option>\n                {avail_img_results.map((result, index) => (<option key={index} value={result}>{result}</option>))}\n            </select>\n        </div>\n\n        <ImageSpaceRoi iter_frame={selected_iteration} result={selected_result} device={selected_device} imgOnload={props.imgOnload}>\n            {props.children}\n        </ImageSpaceRoi>\n    </div>\n    )\n}\n\nexport default ImageDisplayerRoi","import React from 'react'\nimport { Rnd } from 'react-rnd'\n\n\nconst RoiRectangle = ({ placement, id, onDrag, onResize }) => {\n    return(\n        <Rnd\n          position={{x:placement.x, y:placement.y}}\n          size={{width: placement.width, height: placement.height}}\n          title = {id}\n          bounds='.SelectedImageRoi'\n          onDragStop={(_, data)=>{onDrag(id, data.x, data.y)}}\n          onResizeStop={(e, direction, ref, delta, position)=>{onResize(id, position.x, position.y, ref.offsetWidth, ref.offsetHeight)}}>\n        <div className='Rectangle'></div>\n        </Rnd>\n    )\n}\n\nexport default RoiRectangle","import React from 'react'\nimport { Rnd } from 'react-rnd'\n\n\nconst RoiPoint = ({ placement, id, onDrag}) => {\n    return(\n        <Rnd\n          position={{x:placement.x, y:placement.y}}\n          size={{width: 20, height: 20}}\n          title = {id}\n          enableResizing = {false}\n          bounds='.SelectedImageRoi'\n          onDragStop={(_, data)=>{onDrag(id, data.x, data.y)}}>\n        <div className='Point'>{'\\u2715'}</div>\n        </Rnd>\n    )\n}\n\nexport default RoiPoint","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ImageDisplayerRoi } from './components'\nimport { RoiRectangle, RoiPoint } from './components'\nimport { updateImageRoiXY, updateImageRoiWH } from '../../../../actions'\nimport './SelectRoi.css'\n\n\nconst SelectRoi = () => {\n    const [currentImageSizeX, setImageSizeX] = useState(0)\n    const [currentImageSizeY, setImageSizeY] = useState(0)\n\n    const setSize = (width, height) => {\n        setImageSizeX(width)\n        setImageSizeY(height)\n    }\n\n    const dispatch = useDispatch()\n\n    // PREVIOUSLY ALL Math.round functions were replaced with floor function for unknown reason\n    // There might be an issue when dimension(height or widht) + pos (x or y) == max_img_size\n    const translateRectDataToPos = (data) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return({x: Math.round(data.x/scalling),\n                    y: Math.round(data.y/scalling),\n                    width: Math.round(data.width/scalling),\n                    height: Math.round(data.height/scalling)})\n        }\n        else{\n            return data\n        }\n    }\n\n    const translatePointDataToPos = (data) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return({x: Math.round(data.x/scalling - 12),\n                    y: Math.round(data.y/scalling - 12)})\n        }\n        else{\n            return({x: Math.round((data.x - 12)),\n                    y: Math.round((data.y - 12))})\n        }\n    }\n\n    const translateValToData = (val) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return(Math.round(val*scalling))\n        }\n        else {\n            return(val)\n        }\n    }\n    \n    const translatePointValToData = (val) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return(Math.round(val*scalling + 12*scalling))\n        }\n        else {\n            return(val + 12)\n        }\n    } \n\n    const updatePosition = (id, x, y) => {\n        dispatch(updateImageRoiXY(id, translateValToData(x), translateValToData(y)))\n    }\n\n    const updatePointPostion = (id, x, y) => {\n        dispatch(updateImageRoiXY(id, translatePointValToData(x), translatePointValToData(y)))\n    }\n\n    const updateSize = (id, x, y, w, h) => {\n        dispatch(updateImageRoiXY(id, translateValToData(x), translateValToData(y)))\n        dispatch(updateImageRoiWH(id, translateValToData(w), translateValToData(h)))\n    }\n\n    const all_rois = useSelector(state => state.imagerois)\n    const rois_to_display = all_rois.filter(roi => roi.display_roi === true)\n\n    const printRoi = (roi) => {\n        switch(roi.roi_type) {\n            case 'RECTANGLE':\n                return <RoiRectangle key={roi.roi_id} id={roi.roi_id} placement={translateRectDataToPos(roi.roi_data)} onDrag={updatePosition} onResize={updateSize}/>\n            case 'POINT':\n                return <RoiPoint key={roi.roi_id} id={roi.roi_id} placement={translatePointDataToPos(roi.roi_data)} onDrag={updatePointPostion}/>\n        }\n    }\n\n    return(\n        <div className='SelectRoi'>\n            <ImageDisplayerRoi imgOnload={setSize}>\n                {rois_to_display.map(roi=> printRoi(roi))}\n            </ImageDisplayerRoi>   \n        </div>\n    )\n}\n\nexport default SelectRoi","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setRoiDisplay, removeRoi } from '../../../../actions'\nimport './RoiTile.css'\n\n\nconst RoiTile = ({ roi }) => {\n\n    const dispatch = useDispatch()\n\n    return(\n        <div className='RoiTile'>\n            ROI ID: {roi.roi_id} <input type='checkbox' checked={roi.display_roi} onClick={() => dispatch(setRoiDisplay(roi.roi_id, !roi.display_roi))}></input> \n            <div className=\"close\" onClick={() => dispatch(removeRoi(roi.roi_id))} >\n            {'\\u2715'}\n            </div>\n            \n            <br/> \n            type: {roi.roi_type} <br/>\n            {JSON.stringify(roi.roi_data, null, 1)}\n        </div>\n    )\n}\n\nexport default RoiTile","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addImageRoi } from '../../../../actions'\nimport RoiTile from './RoiTile'\nimport './RoiManager.css'\n\nconst RECTANGLE_DEF = {x:0,y:0,width:200,height:200}\nconst POINT_DEF = {x:200,y:200}\n\nconst RoiManager = () => {\n    const dispatch = useDispatch()\n    \n    const all_rois = useSelector(state => state.imagerois)\n    \n    return(\n    <div className='RoiManager'>\n        <div className='RoiButtons'>\n            <button className='AddButton' onClick={()=>dispatch(addImageRoi('RECTANGLE', RECTANGLE_DEF, true))}>Add rectangle</button>\n            <button className='AddButton' onClick={()=>dispatch(addImageRoi('POINT', POINT_DEF, true))}>Add point</button>\n        </div>\n        <div className='RoisList'>\n            {all_rois.map(roi=>(\n                <RoiTile key={roi.roi_id} roi={roi}/>\n            ))}\n        </div>    \n    </div>\n    )\n}\n\nexport default RoiManager","import React, { useState } from 'react'\nimport ReactEcharts from 'echarts-for-react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setFocus } from '../../../../actions'\nimport './ChartDisplayer.css'\n\n\nconst COLOR_PALETTE = ['#111d5e', '#c70039', '#f37121', '#ffbd69', '#086972', '#01a9b4', '#87dfd6', '#fbfd8a', '#184d47', '#96bb7c']\n\nconst compareArrays = (array1, array2) => {\n    // if the other array is a falsy value, return\n    if (!array2 || !array1)\n        return false;\n\n    // compare lengths - can save a lot of time \n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0, l=array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (compareArrays(!array1[i],(array2[i])))\n                return false;       \n        }           \n        else if (array1[i] != array2[i]) { \n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;   \n        }           \n    }       \n    return true;\n}\n\n\nconst getOptionsForAxes = (iteration_list) => {\n    let options = {}\n    let properties = []\n    let results = []\n\n    for(const iteration of iteration_list){\n        for(const entry of iteration.data_frames){\n            for(const property in entry.data.properties) {  \n                const obj = [entry.data.data_source, property, 'property']\n                if(!properties.some(el => compareArrays(el, obj))){\n                  properties.push(obj)\n                }\n              }\n            for(const result in entry.data.results) {\n                const obj = [entry.data.data_source, result, 'result']\n                if(!results.some(el => compareArrays(el, obj)) && entry.data.results[result].type === 'NUM'){\n                  results.push(obj)\n                }\n            }\n        }\n      }\n      options['properties'] = properties\n      options['results'] = results\n      return options\n}\n\nconst getResultStr = (result) => (result[0] +' result: ' + result[1])\n\nconst getPropertyStr = (property) => (property[0] +' property: ' + property[1])\n\nconst extractDataFromFrames = (data_frames, raw_value_source) => {\n    let values = {}\n    if(raw_value_source !== 'INIT'){\n        const value_source = JSON.parse(raw_value_source)\n        const data_source = value_source[0]\n        const option = value_source[1]\n        const option_type = value_source[2]\n    \n    \n        switch(option_type) {\n            case 'property':\n                for(const iteration of data_frames)\n                    for(const frame of iteration.data_frames) {\n                        try{\n                            if(frame.data.data_source === data_source){\n                                values[frame.id] = [frame.data.properties[option], frame.data.iter_token]\n                            }\n                        } catch(e){}\n                    }\n            case 'result':\n                for(const iteration of data_frames)\n                    for(const frame of iteration.data_frames) {\n                        try{\n                            if(frame.data.data_source === data_source){\n                                values[frame.id] = [frame.data.results[option].value, frame.data.iter_token]\n                            }\n                        } catch(e){}\n                    }\n            default: {}\n        }\n    }\n    return values\n}\n\nconst getDataPointsFromXandY = (x_data, y_data) => {\n    const data = []\n    for(const point in x_data){\n        if(y_data.hasOwnProperty(point)){\n            let temp = {}\n            temp.id = point\n            temp.data = [Number(x_data[point][0]), Number(y_data[point][0])]\n            temp.iter_token = x_data[point][1]\n            data.push(temp)\n        }\n      }\n    return data\n}\n\nconst getRangesForPlot = (data_points) => {\n    const values_x = data_points.map(el => el.data[0])\n    const values_y = data_points.map(el => el.data[1])\n    const min_x = Math.min.apply(null, values_x)\n    const max_x = Math.max.apply(null, values_x)\n    const min_y = Math.min.apply(null, values_y)\n    const max_y = Math.max.apply(null, values_y)\n    const range_x = max_x - min_x\n    const range_y = max_y - min_y\n    \n    return({'min_x':min_x - 0.05*range_x, 'max_x':max_x + 0.05*range_x, 'min_y':min_y - 0.05*range_y, 'max_y':max_y + 0.05*range_y})\n}\n\nconst findDiferentFramesGroups = (frames_in_iterations) => {\n    const frames_groups = []\n    for(const iteration of frames_in_iterations) {\n        if(!frames_groups.includes(iteration.data_frames[0].data.sequence_name)) {\n            frames_groups.push(iteration.data_frames[0].data.sequence_name)\n        }\n    }\n    return(frames_groups)\n}\n\nconst assignColorsToIterations = (iterations_list) => {\n    const frames_groups = findDiferentFramesGroups(iterations_list)\n    const group_color_assignment = {}\n    for(const [i, item] of frames_groups.entries()) {\n        group_color_assignment[item] = COLOR_PALETTE[i % COLOR_PALETTE.length]\n    }\n    const id_color_assignment = {}\n    for(const iteration of iterations_list){\n        for(const frame of iteration.data_frames) {\n            id_color_assignment[frame.id] = group_color_assignment[frame.data.sequence_name]\n        }\n    }\n\n    return(id_color_assignment)\n}\n\nconst renderOptionsForEchartsChart = (data, xlabel, ylabel, ranges, color_assignment) => {\n    let x_name = ''\n    let y_name = ''\n\n    if(xlabel !== 'INIT'){\n        const xlabel_parsed = JSON.parse(xlabel)\n        x_name = xlabel_parsed[0] + ': ' + xlabel_parsed[1]\n    }\n\n    if(ylabel !== 'INIT'){\n        const ylabel_parsed = JSON.parse(ylabel)\n        y_name = ylabel_parsed[0] + ': ' + ylabel_parsed[1]\n    }\n\n    const options = {\n        backgroundColor: '#f4f4f4',\n        tooltip: {\n          trigger: 'axis',\n          showContent: false,\n          axisPointer: {\n              type: 'cross'\n          }\n        },\n        xAxis: {\n            min: ranges.min_x,\n            max: ranges.max_x,\n            name: x_name,\n            nameLocation: 'center',\n          type: 'value',\n          splitLine: {\n              lineStyle: {\n                  type: 'dashed'\n              }\n          },\n        },\n        yAxis: {\n            min: ranges.min_y,\n            max: ranges.max_y,\n            name: y_name,\n          type: 'value',\n          splitLine: {\n              lineStyle: {\n                  type: 'dashed'\n              }\n          }\n        },\n        series: []\n    }\n\n    for(const item of data) {\n        options.series.push({\n            name: item.iter_token,\n            data: [item.data],\n            type: 'scatter',\n            color: color_assignment[item.id],\n            emphasis: {\n                label: {\n                    show: true,\n                    position: 'left',\n                    color: 'black',\n                    fontSize: 16\n                }\n            }\n        })\n    }\n\n    return options\n}\n// SAVE AS CSV FUNCTIONS //\nconst exportToCsv =(filename, rows) => {\n    var processRow = function (row) {\n        var finalVal = '';\n        for (var j = 0; j < row.length; j++) {\n            var innerValue = row[j] === null ? '' : row[j].toString();\n            if (row[j] instanceof Date) {\n                innerValue = row[j].toLocaleString();\n            };\n            var result = innerValue.replace(/\"/g, '\"\"');\n            if (result.search(/(\"|,|\\n)/g) >= 0)\n                result = '\"' + result + '\"';\n            if (j > 0)\n                finalVal += ',';\n            finalVal += result;\n        }\n        return finalVal + '\\n';\n    }\n  \n    var csvFile = '';\n    for (var i = 0; i < rows.length; i++) {\n        csvFile += processRow(rows[i]);\n    }\n  \n    var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n    if (navigator.msSaveBlob) { // IE 10+\n        navigator.msSaveBlob(blob, filename);\n    } else {\n        var link = document.createElement(\"a\");\n        if (link.download !== undefined) { // feature detection\n            // Browsers that support HTML5 download attribute\n            var url = URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst handleCsvDownload = (filename, points) => {\n    const extracted_data_points = []\n    for(const point of points) {\n        extracted_data_points.push(point.data)\n    }\n    exportToCsv(filename, extracted_data_points)\n} \n//////\n\nconst ChartDisplayer = () => {\n    const dispatch = useDispatch()\n    const data_frames = useSelector(state => state.activeframes)\n\n    const color_assignment = assignColorsToIterations(data_frames)\n\n    const [x_axis_selection, setXAxis] = useState('INIT')\n    const [y_axis_selection, setYAxis] = useState('INIT')\n\n    const avail_options = getOptionsForAxes(data_frames)\n\n    const x_data = extractDataFromFrames(data_frames, x_axis_selection)\n    const y_data = extractDataFromFrames(data_frames, y_axis_selection)\n\n    const points = getDataPointsFromXandY(x_data, y_data)\n    const ranges = getRangesForPlot(points)\n    \n    const events = {click: (e) => dispatch(setFocus(data_frames.find(frame => frame.iter_token === e.seriesName)))}\n\n\n    return(\n        <div className ='ChartDisplayer'>\n            <div className = 'ChartSelector'>\n                Select X:\n                <select value={x_axis_selection} onChange={event=>setXAxis(event.target.value)}>\n                    <option value={'INIT'}>Select values source</option>\n                    {avail_options.properties.map((property, index) => (<option key={'p' + String(index)} \n                                                                                value={JSON.stringify(property)}>\n                                                                                    {getPropertyStr(property)}</option>))}\n                    {avail_options.results.map((result, index) => (<option key={'r' + String(index)} \n                                                                           value={JSON.stringify(result)}>\n                                                                               {getResultStr(result)}</option>))}\n                </select>\n                Select Y:\n                <select value={y_axis_selection} onChange={event=>setYAxis(event.target.value)}>\n                    <option value={'INIT'}>Select values source</option>\n                    {avail_options.properties.map((property, index) => (<option key={'p' + String(index)} \n                                                                                value={JSON.stringify(property)}>\n                                                                                    {getPropertyStr(property)}</option>))}\n                    {avail_options.results.map((result, index) => (<option key={'r' + String(index)} \n                                                                           value={JSON.stringify(result)}>\n                                                                               {getResultStr(result)}</option>))}\n                </select>\n                <button onClick={() => handleCsvDownload('result.csv', points)}>Download</button>\n            </div>\n\n                <ReactEcharts option={renderOptionsForEchartsChart(points, x_axis_selection, y_axis_selection, ranges, color_assignment)} \n                              onEvents={events}\n                              style={{\n                                height: 'calc(100% - 30px)',\n                                width: '100%',\n                              }}/>\n\n        </div>\n    )\n}\n\nexport default ChartDisplayer","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ReactEcharts from 'echarts-for-react'\nimport { readRemoteFile } from 'react-papaparse'\nimport './CSVDisplayer.css'\nimport { SERVER_IP_IMG } from '../../../../api'\n\n\nconst renderEchartsOptions = (data_list) => {\n    const rendered_options = {\n        backgroundColor: '#f4f4f4',\n        xAxis: {\n            type: 'value'\n        },\n        yAxis: {\n            type: 'value'\n        },\n        toolbox: {\n            feature: {\n                dataZoom: {\n                    yAxisIndex: 'none',\n                    title: {\n                        zoom: 'Zoom',\n                        back: 'Back'\n                    }\n                    \n                },\n                restore: {\n                    title: 'Restore'\n                },\n                saveAsImage: {\n                    title: 'Save as Image'\n                }\n            }\n        },\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                animation: false,\n                label: {\n                    backgroundColor: '#505765'\n                }\n            }\n        },\n        series: []\n    }\n \n    for(const data of data_list){\n        if(data[0].length < 3) {\n            rendered_options.series.push({\n                type: 'line',\n                showSymbol: false,\n                data: data\n            })\n        } else {\n            for(let i = 1; i < data[0].length; i++){\n                rendered_options.series.push({\n                    type:'line',\n                    showSymbol: false,\n                    data: data.map( row => ([row[0], row[i]]))\n                })\n            }\n        }\n    }\n\n    return(rendered_options)\n}\n\nconst loadManyCSVFiles = (url_list, callback_function, final_data_list = []) => {\n    if(url_list.length > 0) {\n        const file_path = url_list[0]\n        url_list.shift()\n        readRemoteFile(SERVER_IP_IMG + file_path, {\n            download: true,\n            complete: (results) => {\n                loadManyCSVFiles(url_list, callback_function, [...final_data_list, results.data])\n            }\n        })\n    }\n    else {\n        if(final_data_list.length > 0) {\n            callback_function(final_data_list)\n        }\n        else {\n            callback_function([])\n        }\n    }\n}\n\n\nconst findAvailableDevices = (frames_list) => {\n    let devices_names_list = []\n    for(let iteration of frames_list) {\n        for(let frame of iteration.data_frames) {\n            let temp_name = frame.data.data_source\n            if(!devices_names_list.includes(temp_name)) {\n                devices_names_list.push(temp_name)\n            }\n        }\n    }\n    return(devices_names_list)\n}\n\n\nconst findAvailableCSVResults = (device_name, frames_list) => {\n    let results_names_list = []\n    for(let iteration of frames_list) {\n        for(let frame of iteration.data_frames) {\n            for(let result in frame.data.results) {\n                if(frame.data.results[result].type === 'CSV' && frame.data.data_source === device_name) {\n                    if(! results_names_list.includes(result)){\n                        results_names_list.push(result)\n                    }\n                }\n            }\n        }\n    }\n    return(results_names_list)\n}\n\n\nconst findCSVurls = (selected_device, selected_result, frames_list, only_focussed) => {\n    const csv_urls_list = []\n    if(selected_device !== 'INIT' && selected_result !== 'INIT' && frames_list.length > 0) {\n        if(only_focussed){\n            let url = ''\n            try{\n                url = frames_list.find(iter => iter.focussed === true).data_frames\n                .find(frame => frame.data.data_source === selected_device)\n                .data.results[selected_result].value\n            } catch {\n                url = undefined\n            }\n\n            if(url !== undefined) {\n                csv_urls_list.push(url)\n            }\n        } else {\n            for(const iter of frames_list){\n                let url = ''\n                try {\n                    const frame_from_the_device = iter.data_frames.find(frame => frame.data.data_source === selected_device)\n                    url = frame_from_the_device.data.results[selected_result].value\n                } catch {\n                    url = undefined\n                }\n                if(url !== undefined) {\n                    csv_urls_list.push(url)\n                }\n            }\n        }\n    }\n\n    return(csv_urls_list)\n}\n\nconst exportToCsv =(filename, rows) => {\n    var processRow = function (row) {\n        var finalVal = '';\n        for (var j = 0; j < row.length; j++) {\n            var innerValue = row[j] === null ? '' : row[j].toString();\n            if (row[j] instanceof Date) {\n                innerValue = row[j].toLocaleString();\n            };\n            var result = innerValue.replace(/\"/g, '\"\"');\n            if (result.search(/(\"|,|\\n)/g) >= 0)\n                result = '\"' + result + '\"';\n            if (j > 0)\n                finalVal += ',';\n            finalVal += result;\n        }\n        return finalVal + '\\n';\n    }\n  \n    var csvFile = '';\n    for (var i = 0; i < rows.length; i++) {\n        csvFile += processRow(rows[i]);\n    }\n  \n    var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n    if (navigator.msSaveBlob) { // IE 10+\n        navigator.msSaveBlob(blob, filename);\n    } else {\n        var link = document.createElement(\"a\");\n        if (link.download !== undefined) { // feature detection\n            // Browsers that support HTML5 download attribute\n            var url = URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst handleCsvDownload = (filename, points) => {\n    const extracted_data_points = []\n    for(const data_set of points) {\n        for(const point of data_set) {\n            extracted_data_points.push(point)\n        }\n    }\n    exportToCsv(filename, extracted_data_points)\n} \n\nconst CSVDisplayer = () => {\n    const active_iterations = useSelector(state => state.activeframes)\n\n    const [display_focussed, setDisplayFocussed] = useState(true)\n\n    const [selected_device, setSelectedDevice] = useState('INIT')\n    const [selected_result, setSelectedResult] = useState('INIT')\n    const available_devices = findAvailableDevices(active_iterations)\n    const available_CSV_results = findAvailableCSVResults(selected_device, active_iterations)\n\n    const selected_traces_urls = findCSVurls(selected_device, selected_result, active_iterations, display_focussed)\n    \n    const [selected_traces, setSelectedTraces] = useState([])\n    \n    useEffect(() => loadManyCSVFiles(selected_traces_urls, setSelectedTraces), [selected_device, selected_result, active_iterations, display_focussed])\n    \n\n    //REMEMBER ABOUT notMerge={true} in ReactsEcharts, otherwise many plots may be unintentionally present\n    // discoused here : https://github.com/apache/incubator-echarts/issues/6202\n    return(\n        <div className = 'CSVDisplayer'>\n            <div className = 'CSVSelector'>\n                <select  value={selected_device} onChange={event=>setSelectedDevice(event.target.value)}>\n                    <option value={'INIT'}>Select device</option>\n                    {available_devices.map((device, index) => (<option key={index} value={device}>{device}</option>))}\n                </select>\n                <select  value={selected_result} onChange={event=>setSelectedResult(event.target.value)}>\n                    <option value={'INIT'}>Select result to show</option>\n                    {available_CSV_results.map((result, index) => (<option key={index} value={result}>{result}</option>))}\n                </select>\n                Display only focussed:\n                <input type=\"checkbox\" defaultChecked={display_focussed} onChange={() => setDisplayFocussed(!display_focussed)} />\n                <button onClick={() => handleCsvDownload('result.csv', selected_traces)}>Download</button>\n            </div>\n\n            <ReactEcharts option={renderEchartsOptions(selected_traces)} \n                          notMerge={true}\n                          style={{\n                            height: 'calc(100% - 30px)',\n                            width: '100%',\n                          }}/>\n\n        </div>)\n}\n\n\nexport default CSVDisplayer","import React from 'react'\nimport { default as WindowWrapper } from './WindowWrapper'\nimport { LogList, SelectedFramesList, FrameAttributesList, ImageDisplayer, SelectRoi, RoiManager, ChartDisplayer, CSVDisplayer } from '../components'\n\nexport const WrappedLogList = (props) => (\n    <WindowWrapper \n      id={props.id}\n      z_index={props.z_index}\n      window_name='Application logs'\n      default_width={400}\n      default_height={120}>\n        <LogList/>\n    </WindowWrapper>\n)\n    \nexport const WrappedSelectedFramesList = (props) => (\n    <WindowWrapper \n      id={props.id}\n      z_index={props.z_index} \n      window_name='Selected frames'\n      default_width={250}\n      default_height={520}>\n        <SelectedFramesList/>\n    </WindowWrapper>\n)\n\nexport const WrappedRoiManager = (props) => (\n    <WindowWrapper \n      id={props.id}\n      z_index={props.z_index} \n      window_name='ROIs manager'\n      default_width={340}\n      default_height={320}>\n        <RoiManager/>\n    </WindowWrapper>\n)\n\nexport const WrappedAttributesList = (props) => (\n    <WindowWrapper   \n      id={props.id} \n      z_index={props.z_index}\n      window_name='Data frame atributes'\n      default_width={600}\n      default_height={280}>\n        <FrameAttributesList />\n    </WindowWrapper>\n)\n\nexport const WrappedImageDisplayer = (props) => (\n    <WindowWrapper\n      id={props.id}\n      z_index={props.z_index}\n      window_name='Image displayer'\n      default_width={400}\n      default_height={452}\n      lock_aspect_ratio={true}>\n        <ImageDisplayer/>\n    </WindowWrapper>\n)\n\nexport const WrappedSelectRoi = (props) => (\n    <WindowWrapper\n      id={props.id}\n      z_index={props.z_index}\n      window_name='ROIs'\n      default_width={600}\n      default_height={600}\n      resizable={false}>\n        <SelectRoi/>\n    </WindowWrapper>\n)\n\nexport const WrappedChartDisplayer = (props) => (\n    <WindowWrapper\n      id={props.id}\n      z_index={props.z_index}\n      window_name='Chart'\n      default_width={840}\n      default_height={370}>\n        <ChartDisplayer/>\n    </WindowWrapper>\n)\n\nexport const WrappedCSVDisplayer = (props) => (\n    <WindowWrapper\n      id={props.id}\n      z_index={props.z_index}\n      window_name = 'CSV Chart'\n      default_width={840}\n      default_height={370}>\n        <CSVDisplayer/>\n    </WindowWrapper>\n)","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport './WorkSpace.css'\nimport { WrappedLogList, \n         WrappedSelectedFramesList, \n         WrappedAttributesList, \n         WrappedImageDisplayer, \n         WrappedSelectRoi, \n         WrappedRoiManager,\n         WrappedChartDisplayer,\n         WrappedCSVDisplayer } from './wrapped_components'\n\n\nconst selectWindow = ({id, window_type, z_index}) => {\n    switch(window_type) {\n        case 'SelectedFrames':\n            return(<WrappedSelectedFramesList key={id} id={id} z_index={z_index}/>)\n        case 'LogList':\n            return(<WrappedLogList key={id} id={id} z_index={z_index}/>)\n        case 'AttributesList':\n            return(<WrappedAttributesList key={id} id={id} z_index={z_index}/>)\n        case 'ImageDisplayer':\n            return(<WrappedImageDisplayer key={id} id={id} z_index={z_index}/>)\n        case 'ROIs':\n            return(<WrappedSelectRoi key={id} id={id} z_index={z_index}/>)\n        case 'RoiManager':\n            return(<WrappedRoiManager key={id} id={id} z_index={z_index}/>)\n        case 'ChartDisplayer':\n            return(<WrappedChartDisplayer key={id} id={id} z_index={z_index}/>)\n        case 'CSVDisplayer':\n            return(<WrappedCSVDisplayer key={id} id={id} z_index={z_index}/>)\n        default:\n            console.log('Unknown window')\n    }\n}\n\n\nconst WorkSpace = () => {\n    const windows = useSelector(state => state.openwindows)\n    return(\n        <div className='WorkSpace'>\n            {windows.map(window => selectWindow(window))}\n        </div>\n    )\n}\n\nexport default WorkSpace","import React from 'react'\nimport { MenuBar, WorkSpace } from './components'\nimport './App.css'\n\nconst App = () => {\n  return(\n    <div>\n      <MenuBar />\n      <WorkSpace />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport App from './App'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}