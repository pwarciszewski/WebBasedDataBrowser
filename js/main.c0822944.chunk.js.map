{"version":3,"sources":["reducers/datatree/datatree.js","reducers/activeframes/activeframes.js","reducers/loglist/loglist.js","reducers/openwindows/openwindows.js","reducers/imagerois/imagerois.js","reducers/availableops/availableops.js","reducers/serverroutine/serverroutine.js","reducers/index.js","api/server_communication.js","actions/datatree/index.js","actions/activeframes/index.js","actions/loglist/index.js","actions/openwindows/index.js","actions/imagerois/index.js","actions/serverroutines/index.js","components/MenuBar/components/DataTree/DataTree.jsx","components/MenuBar/components/NewDataWatcher/NewDataWatcher.jsx","components/MenuBar/components/AddWindowSelection/AddWindowSelection.jsx","components/MenuBar/components/FileDownloader/FileDownloader.jsx","components/MenuBar/components/OperationsMenu/Variable.jsx","components/MenuBar/components/OperationsMenu/VariableDesigner.jsx","components/MenuBar/components/OperationsMenu/Operation.jsx","components/MenuBar/components/OperationsMenu/RoutinesDesigner.jsx","components/MenuBar/components/OperationsMenu/OperationsMenu.jsx","actions/availableops/index.js","components/MenuBar/MenuBar.jsx","components/WorkSpace/wrapped_components/WindowWrapper/WindowWrapper.jsx","components/WorkSpace/components/SelectedFramesList/DataTile.jsx","components/WorkSpace/components/SelectedFramesList/NavigButtons.jsx","components/WorkSpace/components/SelectedFramesList/SelectedFramesList.jsx","components/WorkSpace/components/LogList/LogList.jsx","components/WorkSpace/components/FrameAttributesList/Attribute.jsx","components/WorkSpace/components/FrameAttributesList/FrameAttributesList.jsx","components/WorkSpace/components/ImageDisplayer/ImageSpace.jsx","components/WorkSpace/components/ImageDisplayer/ImageDisplayer.jsx","components/WorkSpace/components/SelectRoi/components/ImageSpaceRoi.jsx","components/WorkSpace/components/SelectRoi/components/ImageDisplayerRoi.jsx","components/WorkSpace/components/SelectRoi/components/RoiRectangle.jsx","components/WorkSpace/components/SelectRoi/components/RoiPoint.jsx","components/WorkSpace/components/SelectRoi/SelectRoi.jsx","components/WorkSpace/components/RoiManager/RoiTile.jsx","components/WorkSpace/components/RoiManager/RoiManager.jsx","components/WorkSpace/components/ChartDisplayer/ChartDisplayer.jsx","components/WorkSpace/wrapped_components/index.js","components/WorkSpace/WorkSpace.jsx","App.jsx","index.js"],"names":["datatree","state","action","type","new_data_tree","activeframes","temp_list","active_frames_list","reverse","forEach","frame","focussed","new_frames","cleanted_old_state","map","new_focussed_index","index","indexOf","frame_to_remove","length","new_state","update","$set","slice","new_focussed_index2","previous_index2","findIndex","new_state2","moveFocusForward","next_index","moveFocusBack","createUpdatedState","frames","console","log","index_to_update","find","in_state_frame","id","data","frames_to_update","loglist","prepareStateWithAddedLog","text","ID","openwindows","window_type","window","ROI_ID","imagerois","roi_id","roi_type","roi_data","display_roi","updateRoiDataXY","roi","x","roi_new_x","y","roi_new_y","updateRoiDataWH","width","roi_new_w","height","roi_new_h","setRoiDisplay","availableops","new_ops","operation","some","entry","operation_name","push","available_ops_list","op","updated_operation","updated_state","operation_properties","serverroutine","new_routine","addOperation","updated_routine","removeOperation","updateOperation","param","value","routine","params","combineReducers","SERVER_IP","postData","a","url","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","getNewestID","wrapped_action","then","catch","err","fetchData","selected_frames","setFocus","addLog","addWindow","addImageRoi","updateImageRoiXY","setNewRoutine","DataTree","useSelector","dispatch","useDispatch","className","onChange","currentNode","selectedNodes","getFramesIDsFromTree","nodes_list","IDs","node_i","hasOwnProperty","Number","children","ids_list","nodes","id_i","address","_id","split","shift","last_add","i","pop","node","l","extractNodesFromInternalIDs","onFocus","retrieved_data","keepTreeOnSearch","showPartiallySelected","texts","placeholder","NewDataWatcher","useState","last_newest_id","setLastId","checked","toggleChecked","newest_id","setNewNewestId","useEffect","interval","setInterval","new_id","addNewFrame","clearInterval","active","toString","onClick","String","AddWindowSelection","FileDownloader","frames_ids","onSubmit","e","confirm","preventDefault","handleSubmitCommand","name","Variable","variable","handleValueChange","defaultValue","event","target","VariableDesigner","param_name","available_rois","handleRoiSelection","rois","options","key","renderRoiOptions","Operation","vars_list","renderVariables","RoutinesDesigner","avail_ops","selected_operation","setSelectedOperation","ops","ops_list","variables","renderOptionsForOperationSelection","parse","operations_list","entries","renderOperationsForRoutine","add_log_action","Modal","setAppElement","customStyles","content","top","left","right","bottom","marginRight","transform","fontFamily","background","overlay","backgroundColor","extractIds","active_frames","group_name","findFocussedFrame","frames_list","sequence_name","findFramesForGroup","OperationsMenu","show","setShow","handleShow","fetchOps","available_operations","frames_groups","includes","findDiferentFramesGroups","selected_group","setSelectedGroup","selected_op_object","setSelectedOpObj","selected_op_name","setSelectedOp","selected_roi","setSelectedRoi","prepareTailoredSetSelectedOpObj","obj","newobj","isOpen","style","shouldCloseOnOverlayClick","onRequestClose","renderGroupOption","op_name","renderOperationOption","roi_in","rendered_variables","undefined","error","renderParamsForOperation","parameters","update_results_action","dispatchOperation","operation_in","extracted_params","extractParameters","MenuBar","WindowWrapper","props","bounds","dragHandleClassName","resizeGrid","dragGrid","default","default_width","default_height","lockAspectRatio","lock_aspect_ratio","enableResizing","resizable","window_name","prepareImgUrl","data_frame","results","simpleSubtraction","DataTile","src","NavigButtons","frame_focussed","SelectedFramesList","tileRef","useRef","spaceRef","ref","current","offset","offsetTop","scrollTop","clientHeight","scrollTo","scrollToRef","LogList","logs","React","createRef","scrollHeight","renderCell","Attribute","FrameAttributesList","selected_frame","selected_option","setSelectedOption","selection","parsed","selected_data","properties","item","parseFrame","attribute","ImageSpace","ImageDisplayer","avail_img_results","result","getAvailResults","selected_result","setSelectedResult","ImageSpaceRoi","onLoad","imgOnload","naturalWidth","naturalHeight","ImageDisplayerRoi","RoiRectangle","placement","onDrag","onResize","position","size","title","onDragStop","_","onResizeStop","direction","delta","offsetWidth","offsetHeight","RoiPoint","SelectRoi","currentImageSizeX","setImageSizeX","setImageSizeY","translateRectDataToPos","scalling","Math","floor","translatePointDataToPos","translateValToData","val","translatePointValToData","updatePosition","updatePointPostion","updateSize","w","h","rois_to_display","filter","printRoi","RoiTile","RECTANGLE_DEF","POINT_DEF","RoiManager","all_rois","COLOR_PALETTE","getResultStr","getPropertyStr","property","extractDataFromFrames","data_frames","value_source","source_char","option","values","assignColorsToIds","group_color_assignment","id_color_assignment","renderOptionsForEchartsChart","xlabel","ylabel","ranges","color_assignment","x_name","y_name","tooltip","trigger","axisPointer","xAxis","min","min_x","max","max_x","nameLocation","splitLine","lineStyle","yAxis","min_y","max_y","series","color","emphasis","label","fontSize","handleCsvDownload","filename","points","extracted_data_points","point","rows","processRow","row","finalVal","j","innerValue","Date","toLocaleString","replace","search","csvFile","blob","Blob","navigator","msSaveBlob","link","document","createElement","download","URL","createObjectURL","setAttribute","visibility","appendChild","click","removeChild","exportToCsv","ChartDisplayer","x_axis_selection","setXAxis","y_axis_selection","setYAxis","avail_options","getOptionsForAxes","x_data","y_data","temp","getDataPointsFromXandY","data_points","values_x","el","values_y","apply","range_x","range_y","getRangesForPlot","events","seriesName","onEvents","WrappedLogList","WrappedSelectedFramesList","WrappedRoiManager","WrappedAttributesList","WrappedImageDisplayer","WrappedSelectRoi","WrappedChartDisplayer","WorkSpace","windows","selectWindow","App","store","createStore","rootReducer","render","getElementById"],"mappings":"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","file":"static/js/main.c0822944.chunk.js","sourcesContent":["const datatree = (state = [], action) => {\n    switch(action.type) {\n        case 'LOAD_DATATREE':\n            return action.new_data_tree\n        default:\n            return state\n    }\n}\n\nexport default datatree","import update from 'immutability-helper'\n\nconst activeframes = (state = [], action) => {\n    let temp_list = []\n    switch(action.type) {\n        case 'SET_ACTIVE_FRAMES':\n            temp_list = action.active_frames_list.reverse()\n            temp_list.forEach(frame => frame.focussed = false)\n            temp_list[0].focussed = true\n            return temp_list\n        case 'CLEAR_FRAMES':\n            return []\n        case 'ADD_ACTIVE_FRAMES':\n            temp_list = action.new_frames\n            temp_list.forEach(frame => frame.focussed = false)\n            temp_list[0].focussed = true\n            const cleanted_old_state = state.map(frame => ({...frame, focussed: false}))\n            return ([\n                ...temp_list,\n                ...cleanted_old_state\n            ])\n        case 'REMOVE_ONE_OF_ACTIVE_FRAMES':\n            let index = state.indexOf(action.frame_to_remove)\n            let new_focussed_index\n            if(state.length>1 & index+1<state.length){\n                new_focussed_index = index + 1\n            } else if (index+1 === state.length & index !== 0) {\n                new_focussed_index = index - 1\n            } else {\n                new_focussed_index = index\n            }\n            let new_state = []\n            if(state[index].focussed){\n                new_state = update(state, {\n                    [new_focussed_index]: {focussed: {$set: true}}\n                })\n            } else {\n                new_state = state\n            }\n            return ([\n                ...new_state.slice(0, index),\n                ...new_state.slice(index+1)\n            ])\n        case 'SET_FOCUS':\n            let new_focussed_index2 = state.indexOf(action.frame)\n            let previous_index2 = state.findIndex(frame => frame.focussed === true)\n            const new_state2 = update(state, {\n                [previous_index2]: {focussed: {$set: false}},\n                [new_focussed_index2]: {focussed: {$set: true}}\n            })\n            return new_state2\n        case 'FOCUS_NEXT':\n            const moveFocusForward = frame => {\n                const index = state.indexOf(frame)\n                const next_index = (index < state.length - 1)? index+1 : index\n                const new_state = (state.length !== 0)? update(state, {\n                    [index]: {focussed: {$set: false}},\n                    [next_index]: {focussed: {$set: true}}\n                }) : state\n                return new_state\n            }\n            return(moveFocusForward(action.frame))\n        case 'FOCUS_PREVIOUS':\n            const moveFocusBack = frame => {\n                const index = state.indexOf(frame)\n                const next_index = (index > 0)? index-1 : index\n                const new_state = (state.length !== 0)? update(state, {\n                    [index]: {focussed: {$set: false}},\n                    [next_index]: {focussed: {$set: true}}\n                }) : state\n                return new_state\n            }\n            return(moveFocusBack(action.frame))\n        case 'UPDATE_ACTIVE_FRAMES':\n            const createUpdatedState = (frames) => {\n                let new_state = state\n                console.log(frames)\n                for(const frame of frames){\n                    const index_to_update = state.indexOf(state.find(in_state_frame => in_state_frame.id === frame.id))\n                    new_state = update(new_state, {\n                        [index_to_update]: {data: {$set: frame.data}}\n                    })\n                }\n            return new_state\n            }\n            return(createUpdatedState(action.frames_to_update))\n        default:\n            return state\n    }\n}\n\nexport default activeframes","const state_max_len = 200\n\nconst initial_log = 'Welcome to WBDB UI!'\n\nconst loglist = (state = [initial_log], action) => {\n    switch(action.type) {\n        case 'ADD_LOG':\n            const prepareStateWithAddedLog = text => {\n                const new_state = (state.length < state_max_len)?\n                [...state, text] :\n                [...state.slice(1, state_max_len), text]\n                return new_state\n            }\n            return prepareStateWithAddedLog(action.text)\n        default:\n            return state\n    }\n}\n\nexport default loglist","let ID = 0\n\n//const initial_state = [{id:0, window_type: 'LogList'}, {id:1, window_type:'SelectedFrames'}]\n\nconst openwindows = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_WINDOW':\n            ID = ID + 1\n            return(\n                [...state,\n                    {id: ID, window_type: action.window_type} ]\n            )\n        case 'REMOVE_WINDOW':\n            return(\n                [...state.slice(0, state.findIndex(window => window.id === action.id)),\n                 ...state.slice(state.findIndex(window => window.id === action.id) + 1)]\n            )\n        default:\n            return state\n    }\n}\n\nexport default openwindows\n","import update from 'immutability-helper'\n\nlet ROI_ID = 0\n\nconst imagerois = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_IMAGE_ROI':\n            ROI_ID = ROI_ID + 1\n            return(\n                [...state,\n                { roi_id: ROI_ID,\n                  roi_type: action.roi_type,\n                  roi_data: action.roi_data,\n                  display_roi: action.display_roi}]\n            )\n        case 'UPDATE_IMAGE_ROI_XY':\n            const updateRoiDataXY = () => {\n                const index = state.findIndex(roi => roi.roi_id === action.roi_id)\n                const newstate = update(state, {\n                    [index]: {roi_data: {x: {$set: action.roi_new_x}, y: {$set: action.roi_new_y}}},\n                })\n                return newstate\n            }\n            return updateRoiDataXY()\n        case 'UPDATE_IMAGE_ROI_WH':\n            const updateRoiDataWH = () => {\n                const index = state.findIndex(roi => roi.roi_id === action.roi_id)\n                const newstate = update(state, {\n                    [index]: {roi_data: {width: {$set: action.roi_new_w}, height: {$set: action.roi_new_h}}},\n                })\n                return newstate\n            }\n            return updateRoiDataWH()\n        \n        case 'SET_ROI_DISPLAY':\n            const setRoiDisplay = () => {\n                const index = state.findIndex(roi => roi.roi_id === action.roi_id)\n                const newstate = update(state, {\n                    [index]: {display_roi: {$set: action.display_roi}},\n                })\n                return newstate\n            }\n            return setRoiDisplay()\n        \n        case 'REMOVE_ROI':\n            return(\n                [...state.slice(0, state.findIndex(roi => roi.roi_id === action.roi_id)),\n                 ...state.slice(state.findIndex(roi => roi.roi_id === action.roi_id) + 1)]\n            )\n\n        default:\n            return state\n    }\n}\n\nexport default imagerois","import update from 'immutability-helper'\n\n// State entry:\n//  {operation_name: \"<some_name>\" ,\n//   operation_properties: {\n//    type: \"<op_type>\"\n//    variables: {object containing variables represented as \"var_name\":value}  \n//  }}\n\nconst availableops = (state = [], action) => {\n    switch(action.type) {\n        case 'INITIALIZE_OPERATIONS':\n            const new_ops = []\n            for(const operation in action.available_ops_list){\n                if(!state.some(entry => entry.operation_name === operation)) {\n                    new_ops.push({'operation_name': operation, 'operation_properties':action.available_ops_list[operation]})\n                }\n            }\n            return(\n                [...state,\n                 ...new_ops]\n            )\n        case 'UPDATE_OPERATION':\n            let index_to_update = state.findIndex(op => op.operation_name === action.updated_operation.operation_name)\n            const updated_state = update(state, {\n                [index_to_update]: {operation_properties: {$set: action.updated_operation.operation_properties}}\n            })\n            return(updated_state)\n        default:\n            return state\n    }\n}\n\nexport default availableops","const serverroutine = (state = [], action) => {\n    switch(action.type){\n        case 'SET_NEW_ROUTINE':\n            return [ action.new_routine ]\n        case 'ADD_OPERATION':\n            const addOperation = (operation) => {\n                const updated_routine = state[0]\n                updated_routine.push(operation)\n                return(updated_routine)\n            }\n            return([ addOperation(action.operation) ])\n\n        case 'REMOVE_OPERATION':\n            const removeOperation = (index) => {\n                const updated_routine = [...state[0].slice(0, index), ...state[0].slice(index+1)]\n                return(updated_routine)\n            }\n\n            return([ removeOperation(action.index) ])\n\n        case 'CHANGE_OPERATION':\n            const updateOperation = (index, param, value) => {\n                const routine = state[0]\n                routine[index].params[param] = value\n                return(routine)\n            }\n\n            return([updateOperation(action.index, action.param, action.value)])\n\n        default:\n            return state\n    }\n}\n\nexport default serverroutine","import { combineReducers } from 'redux'\nimport datatree from './datatree'\nimport activeframes from './activeframes'\nimport loglist from './loglist'\nimport openwindows from './openwindows'\nimport imagerois from './imagerois'\nimport availableops from './availableops'\nimport serverroutine from './serverroutine'\n\nexport default combineReducers({\n    datatree,\n    activeframes,\n    loglist,\n    openwindows,\n    imagerois,\n    availableops,\n    serverroutine\n})","//export const SERVER_IP = 'http://127.0.0.1:8000/DataBrowse'\n//export const SERVER_IP_IMG = 'http://127.0.0.1:8000'\n\n\nexport const SERVER_IP = '/DataBrowse'\nexport const SERVER_IP_IMG = ''\n\n\nfunction utilGenerateURIQuery(data) {\n    let esc = encodeURIComponent\n    let query = Object.keys(data)\n        .map(k => esc(k) + '=' + esc(data[k]))\n        .join('&')\n    return(query)\n  }\n\nasync function postData(url = '', data = {}) {\n    // taken from MDN site\n    // Default options are marked with * \n    const response = await fetch(url, {\n      method: 'POST', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        'Content-Type': 'application/json'\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: 'follow', // manual, *follow, error\n      referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport function getAllDataTree(wrapped_action) {\n    fetch(SERVER_IP + '/getdatatree/')\n        .then(response => response.json())\n        .then(data => { wrapped_action(data) })\n        .catch(err => console.log(err))\n}\n\nexport function getNewestID(wrapped_action) {\n    fetch(SERVER_IP + '/getnewestid/')\n        .then(response => response.json())\n        .then(data => { wrapped_action(data)})\n        .catch(err => console.log(err))\n}\n\nexport function fetchData(wrapped_action, selected_frames) {\n    postData(SERVER_IP + '/fetchdata/', {'selected': selected_frames})\n        .then(data => {wrapped_action(data);console.log(data)})\n        .catch(err => console.log(err))\n}\n\nexport function fetchImg(wrapped_action, img_url) {\n    fetch(SERVER_IP_IMG + img_url)\n        .then(response => response.blob())\n        .then(images => {wrapped_action(URL.createObjectURL(images))})\n        .catch(err => console.log(err))\n}\n\nexport function fetchOps(wrapped_action) {\n    fetch(SERVER_IP + '/fetchOps/')\n        .then(response => response.json())\n        .then(data => { wrapped_action(data) })\n        .catch(err => console.log(err))\n}\n\nexport function dispatchOperation(ids_list, parameters, operation, add_log_action, update_results_action) {\n    add_log_action('Starting ' + operation + '...')\n    postData(SERVER_IP + '/do/', {'selected': ids_list, 'parameters': parameters, 'operation':operation})\n        .then(response => add_log_action(response))\n        .then(() => fetchData(update_results_action, ids_list))\n        .catch(err => console.log(err))\n}\n\nexport function fetchRoutine(wrapped_action) {\n    fetch(SERVER_IP + '/fetchRoutine/')\n        .then(response => response.json())\n        .then(data => wrapped_action(data))\n        .catch(err => console.log(err))\n}\n\nexport function uploadNewRoutine(new_routine, add_log_action) {\n    postData(SERVER_IP + '/setRoutine/', {'new_routine': new_routine})\n        .then(() => add_log_action('Routine updated'))\n        .catch(err => console.log(err))\n}\n","export const loadDataTree = new_data_tree => ({\n    type: 'LOAD_DATATREE',\n    new_data_tree\n})","export const setActiveFrames = active_frames_list => ({\n    type: 'SET_ACTIVE_FRAMES',\n    active_frames_list\n})\n\nexport const updateActiveFrames = frames_to_update => ({\n    type: 'UPDATE_ACTIVE_FRAMES',\n    frames_to_update\n})\n\nexport const addActiveFrame = new_frames => ({\n    type: 'ADD_ACTIVE_FRAMES',\n    new_frames\n})\n\nexport const removeActiveFrame = frame_to_remove => ({\n    type: 'REMOVE_ONE_OF_ACTIVE_FRAMES',\n    frame_to_remove\n})\n\nexport const setFocus = frame => ({\n    type: 'SET_FOCUS',\n    frame\n})\n\nexport const focusNext = frame => ({\n    type: 'FOCUS_NEXT',\n    frame\n})\n\nexport const focusPrevious = frame => ({\n    type: 'FOCUS_PREVIOUS',\n    frame\n})\n\nexport const clearFrames = () => ({\n    type: 'CLEAR_FRAMES'\n})","export const addLog = text => ({\n    type: 'ADD_LOG',\n    text\n})","export const addWindow = window_type => ({\n    type: 'ADD_WINDOW',\n    window_type\n})\n\nexport const removeWindow = id => ({\n    type: 'REMOVE_WINDOW',\n    id\n})","export const addImageRoi = (roi_type, roi_data, display_roi) => ({\n    type: 'ADD_IMAGE_ROI',\n    roi_type,\n    roi_data,\n    display_roi\n})\n\nexport const updateImageRoiXY = (roi_id, roi_new_x, roi_new_y) => ({\n    type: 'UPDATE_IMAGE_ROI_XY',\n    roi_id,\n    roi_new_x,\n    roi_new_y\n})\n\nexport const updateImageRoiWH = (roi_id, roi_new_w, roi_new_h) => ({\n    type: 'UPDATE_IMAGE_ROI_WH',\n    roi_id,\n    roi_new_w,\n    roi_new_h\n})\n\nexport const setRoiDisplay = (roi_id, display_roi) => ({\n    type: 'SET_ROI_DISPLAY',\n    roi_id,\n    display_roi\n})\n\nexport const removeRoi = (roi_id) => ({\n    type: 'REMOVE_ROI',\n    roi_id\n})","export const setNewRoutine = (new_routine) => ({\n    type: 'SET_NEW_ROUTINE',\n    new_routine\n})\n\nexport const removeOperation = (index) => ({\n    type: 'REMOVE_OPERATION',\n    index\n})\n\nexport const addOperation = (operation) => ({\n    type: 'ADD_OPERATION',\n    operation\n})\n\nexport const updateOperation = (index, param, value) => ({\n    type: 'CHANGE_OPERATION',\n    index,\n    param,\n    value\n})\n\nexport default setNewRoutine","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getAllDataTree, fetchData } from '../../../../api'\nimport { loadDataTree, setActiveFrames } from '../../../../actions'\n\nimport DropdownTreeSelect from 'react-dropdown-tree-select'\nimport 'react-dropdown-tree-select/dist/styles.css'\nimport './DataTree.css'\n\n\nfunction extractNodesFromInternalIDs(ids_list, state) {\n    let nodes = []\n\n    for(let id_i in ids_list){\n        let extracted_id = ids_list[id_i]._id\n        let address = extracted_id.split('-')\n\n        address.shift()\n        address = address.map(i=>(Number(i)))\n        let last_add = address.pop()\n\n        let node = state\n\n        for(let l in address) {\n            node = node[address[l]].children\n        }\n        node = node[last_add]\n        \n        nodes.push(node)\n    }\n    return(nodes)\n}\n\n\nfunction getFramesIDsFromTree(nodes_list) {\n    let IDs = []\n    for(let node_i in nodes_list) {\n        if(nodes_list[node_i].hasOwnProperty('value')){\n            IDs.push(Number(nodes_list[node_i].value))\n        } else {\n            IDs.push(...getFramesIDsFromTree(nodes_list[node_i].children))\n        }\n    }\n    return IDs\n}\n\n\nconst DataTree = () => {\n    const data = useSelector(state => state.datatree)\n    const dispatch = useDispatch()\n\n    function onFocus() {\n        getAllDataTree(retrieved_data=>{dispatch(loadDataTree(retrieved_data))})\n    }\n\n    function onChange (currentNode, selectedNodes) {\n        let selected_nodes = extractNodesFromInternalIDs(selectedNodes, data)\n        fetchData(data => {dispatch(setActiveFrames(data))}, getFramesIDsFromTree(selected_nodes))\n       }\n\n    return(\n        <div className = 'DataTree'>\n            <DropdownTreeSelect \n                data={data} \n                onChange={onChange}\n                onFocus={onFocus} \n                keepTreeOnSearch={true} \n                showPartiallySelected={true} \n                texts={{placeholder:'Select frames...'}}/>\n        </div>\n    )\n}\n\nexport default DataTree","import React, { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { getNewestID, fetchData } from '../../../../api'\nimport { addActiveFrame, addLog } from '../../../../actions'\nimport './NewDataWatcher.css'\n\nconst NewDataWatcher = () => {\n    const dispatch = useDispatch()\n    const [last_newest_id, setLastId] = useState(0)\n    const [checked, toggleChecked] = useState(false)\n    const [newest_id, setNewNewestId] = useState(0)\n\n    function handleChange() {\n        if(!checked) {\n            dispatch(addLog(\"Watching for new frames...\"))\n            getNewestID(new_id => {setNewNewestId(new_id)\n                                   setLastId(new_id)})\n        }\n        toggleChecked(!checked)\n    }\n\n    function addNewFrame (checked, newest_id, last_newest_id) {\n        if(checked) {\n            getNewestID(new_id => {setNewNewestId(new_id)})\n            if(last_newest_id !== newest_id) {\n                dispatch(addLog('Detected new frame!'))\n                setLastId(newest_id)\n                fetchData(data => {dispatch(addActiveFrame(data))}, [newest_id])\n            }\n        }\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n          addNewFrame(checked, newest_id, last_newest_id)\n        }, 1000)\n        return () => clearInterval(interval)\n      }, [checked, newest_id, last_newest_id])\n\n    return(\n        <div className=\"NewDataWatcher\" active={checked.toString()} onClick={()=>handleChange()}>\n            <div className='displaytext'>\n                Loading new frames: {String(checked)}\n            </div>\n        </div>\n    )\n}\n\nexport default NewDataWatcher","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { addWindow } from '../../../../actions'\nimport './AddWindowSelection.css'\n\nconst AddWindowSelection = () => {\n    const dispatch = useDispatch()\n    \n    return(\n        <div className=\"AddWindowSelection\">\n            <div className=\"dropdown\">Add new window {'\\u25BC'}</div>\n                <div className=\"dropdown-content\">\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('SelectedFrames'))}>Selected frames</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('LogList'))}>Application logs</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('AttributesList'))}>Attributes list</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('ImageDisplayer'))}>Image displayer</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('ROIs'))}>Display ROIs</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('RoiManager'))}>ROIs manager</div>\n                    <div className=\"dropdown-selection\" onClick={()=>dispatch(addWindow('ChartDisplayer'))}>Graph displayer</div>\n            </div>\n        </div>\n    )\n}\n\nexport default AddWindowSelection\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { SERVER_IP } from '../../../../api'\nimport './FileDownloader.css'\n\nconst FileDownloader = () => {\n    const active_frames = useSelector(state => state.activeframes)\n    const frames_ids = active_frames.map(function(frame) {\n        return frame.id\n    })\n\n    const handleSubmitCommand = (e) => {\n        const r = window.confirm('Zipping files might take a while. Click OK to proceed')\n        if(!r){\n            e.preventDefault();\n        }\n    }\n\n    return(\n        <div className='FileDownloader'>\n            <form action={SERVER_IP + '/download/'} method=\"post\" id=\"formdownload\" onSubmit={(e) => handleSubmitCommand(e)}>\n                <input id=\"container_for_ids\" type=\"hidden\" name=\"ids\" value={[JSON.stringify(frames_ids)]} />\n                <button type='submit'>Download</button>\n            </form>\n        </div>\n    )\n\n}\n\nexport default FileDownloader","import React from 'react'\n\n\nconst Variable = ({variable, value, handleValueChange}) => {\n    return(\n        <div className='Variable'>\n            <label>{variable + ': '}</label>\n            <input type='text' defaultValue={value} onChange={(event)=>handleValueChange(event.target.value)}></input>\n            <br />\n        </div>\n    )\n}\n\nexport default Variable","import React, { useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { updateOperation } from '../../../../actions'\n\nconst renderRoiOptions = (rois) => {\n    const options = []\n    for(const roi of rois) {\n        for(const param in roi.roi_data){\n        options.push(<option value={roi.roi_data[param]} key={'ID ' + roi.roi_id+'; ' + param}>{'ID ' + roi.roi_id+'; ' + param}</option>)\n        }\n    }\n    return(options)\n}\n\n\nconst VariableDesigner = ({index, param_name, value}) => {\n    const dispatch = useDispatch()\n    const available_rois = useSelector(state => state.imagerois)\n\n    const handleRoiSelection = (value) => {\n        if(value !== 'INIT') {\n            dispatch(updateOperation(index, param_name, value))\n        }\n    }   \n\n    return(\n        <div className='VariableDesigner'>\n            <label>{param_name + ': '}</label> \n            <input defaultValue={value} \n                   type=\"text\" \n                   onChange={(event)=>dispatch(updateOperation(index, param_name, event.target.value))}></input>\n            <select onChange={(event)=>handleRoiSelection(event.target.value)}>\n                <option value='INIT'> Select ROI</option>\n                {renderRoiOptions(available_rois)}\n            </select>\n        </div>\n    )\n}\n\nexport default VariableDesigner","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { removeOperation } from '../../../../actions'\nimport VariableDesigner from './VariableDesigner'\n\n\nconst Operation = ({operation, index}) => {\n    const dispatch = useDispatch()\n\n    const renderVariables = () => {\n        const vars_list = []\n        for(const variable in operation.params){\n            vars_list.push(<VariableDesigner key={variable} index={index} param_name={variable} value={operation.params[variable]} />)\n        }\n        return(vars_list)\n    }\n\n    return(\n        <div className='Operation'>\n            <div>\n                {operation.operation} <button className='close' onClick={()=>dispatch(removeOperation(index))}>{'\\u2715'}</button>\n            </div>\n            <div>\n                {renderVariables()}\n            </div>\n        </div>\n\n    )\n}\n\nexport default Operation","import React , { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Operation from './Operation'\nimport { addOperation, addLog } from '../../../../actions'\nimport { uploadNewRoutine } from '../../../../api'\n\nconst renderOperationsForRoutine = (routine) => {\n    const operations_list = []\n    for(const [i, operation] of routine.entries()) {\n        operations_list.push(<Operation operation={operation} index={i} key={i} />)\n    }\n    return(operations_list)\n}\n\nconst formatOperationForRoutine = (operation) => {\n    return({'operation': operation.operation_name, 'params':operation.operation_properties.variables})\n} \n\nconst renderOptionsForOperationSelection = (ops) => {\n    const ops_list = []\n    for(const op of ops){\n        ops_list.push(<option value={JSON.stringify(formatOperationForRoutine(op))} key={op.operation_name}>{op.operation_name}</option>)\n    }\n    return ops_list\n}\n\n\nconst RoutinesDesigner = () => {\n    const dispatch = useDispatch()\n\n    const routine = useSelector(state => state.serverroutine)[0]\n    const avail_ops = useSelector(state => state.availableops)\n\n    const [selected_operation, setSelectedOperation] = useState('INIT')\n\n    const addSelectedOperation = (operation) => {\n        if(operation !== 'INIT') {\n            dispatch(addOperation(JSON.parse(operation)))\n        }\n    }\n\n    return(\n        <div>\n            <div>\n                <select value={selected_operation} onChange={(e) => setSelectedOperation(e.target.value)}>\n                    <option value='INIT'>Select operation</option>\n                    {renderOptionsForOperationSelection(avail_ops)}\n                </select>\n                <button onClick={()=>addSelectedOperation(selected_operation)}>Add operation</button>\n            </div>\n            <div>\n                {renderOperationsForRoutine(routine)}\n            </div>\n            <div className='UploadNewRoutineSpace'>\n                <button onClick={()=>uploadNewRoutine(routine, (text)=>dispatch(addLog(text)))}>Upload new routine</button>\n            </div>\n        </div>\n    )\n}\n\nexport default RoutinesDesigner","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchOps, dispatchOperation, fetchRoutine } from '../../../../api'\nimport { updateActiveFrames, addLog, setNewRoutine} from '../../../../actions'\nimport { initializeOps } from '../../../../actions'\nimport './OperationsMenu.css'\nimport  Modal  from 'react-modal'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\nimport 'react-tabs/style/react-tabs.css'\nimport Variable from './Variable'\nimport RoutinesDesigner from './RoutinesDesigner'\n\nModal.setAppElement('#root')\n\nconst customStyles = {\n    content : {\n      top                   : '40%',\n      left                  : '50%',\n      right                 : 'auto',\n      bottom                : 'auto',\n      marginRight           : '-50%',\n      transform             : 'translate(-50%, -50%)',\n      fontFamily            : 'Arial, Helvetica, sans-serif',\n      background            : '#f4f4f4'  \n      \n    },\n    overlay : {\n        backgroundColor: 'rgba(0,0,0,0.4)'\n    }\n  }\n\nconst renderOperationOption = (operation) => {\n    const op_name = operation.operation_name\n    return(<option key={op_name} value={op_name}>{op_name}</option>)\n}\n\nconst renderGroupOption = (group_name) => {\n    return(<option key={group_name} value={group_name}>{group_name}</option>)\n}\n\nconst findFocussedFrame = (frames) => {\n    for(const frame of frames) {\n        if(frame.focussed === true) {\n            return([frame.id])\n        }\n    }\n    return([])\n}\n\nconst findFramesForGroup = (frames, group_name) => {\n    const frames_list = []\n    for(const frame of frames){\n        if(frame.data.sequence_name === group_name){\n            frames_list.push(frame.id)\n        }\n    }\n    return(frames_list)\n}\n\nconst findDiferentFramesGroups = (frames) => {\n    const frames_groups = []\n    for(const frame of frames) {\n        if(!frames_groups.includes(frame.data.sequence_name)) {\n            frames_groups.push(frame.data.sequence_name)\n        }\n    }\n    return(frames_groups)\n}\n\nconst extractIds = (active_frames, group_name) => {\n    if(group_name === 'FOCUSSED') {\n        return(findFocussedFrame(active_frames))\n    } else {\n        return(findFramesForGroup(active_frames, group_name))\n    }\n}\n\nconst extractParameters = (operation_in, roi_in) => {\n    const operation = (operation_in.hasOwnProperty('operation_properties')) ? operation_in : {'operation_properties':{'variables':{}}}\n    const roi = (roi_in === undefined) ? {'roi_data':{}}:roi_in\n    const extracted_params = {}\n    for(const variable in operation.operation_properties.variables) {\n        if(roi.roi_data.hasOwnProperty(variable)){\n            extracted_params[variable] = roi.roi_data[variable]\n        } else {\n            extracted_params[variable] = operation.operation_properties.variables[variable]\n        }\n    }\n    return(extracted_params)\n}\n\nconst OperationsMenu = () => {\n    const dispatch = useDispatch()\n\n    const [show, setShow] = useState(false)\n    const handleClose = () => setShow(false)\n    const handleShow = () => {\n        fetchRoutine(data => dispatch(setNewRoutine(data)))\n        fetchOps(data => dispatch(initializeOps(data)))\n        setShow(true)\n    }\n\n    const available_operations = useSelector(state => state.availableops)\n    const active_frames = useSelector(state => state.activeframes)\n    const frames_groups = findDiferentFramesGroups(active_frames)\n    const [selected_group, setSelectedGroup] = useState('FOCUSSED')\n\n    const [selected_op_object, setSelectedOpObj] = useState({})\n    const [selected_op_name, setSelectedOp] = useState('INIT')\n\n    const available_rois = useSelector(state => state.imagerois)\n    const [selected_roi, setSelectedRoi] = useState('INIT')\n\n    const handleOperationSelection = (op_name) => {\n        setSelectedOp(op_name)\n        setSelectedOpObj(available_operations.find(op=>op.operation_name === op_name))\n    }\n\n    const prepareTailoredSetSelectedOpObj = (obj, variable, value) => {\n        const newobj = obj\n        newobj.operation_properties.variables[variable] = value\n        setSelectedOpObj(newobj)\n    }\n\n    const renderParamsForOperation = (operation, roi_in) => {\n        const rendered_variables = []\n        const roi = (roi_in === undefined) ? {}:roi_in\n        try {\n        for(const variable in operation.operation_properties.variables){\n            if(roi.hasOwnProperty('roi_data')){\n            if(!roi.roi_data.hasOwnProperty(variable)){\n                rendered_variables.push(<Variable variable={variable} \n                value={operation.operation_properties.variables[variable]}\n                handleValueChange={(value) => prepareTailoredSetSelectedOpObj(selected_op_object, variable, value)} \n                key={variable}></Variable>)\n            }} else {\n                rendered_variables.push(<Variable variable={variable} \n                value={operation.operation_properties.variables[variable]}\n                handleValueChange={(value) => prepareTailoredSetSelectedOpObj(selected_op_object, variable, value)} \n                key={variable}></Variable>)\n            }\n        }   \n        } catch (error) {\n            return(<h4>Select operation</h4>)\n        }\n        return(rendered_variables)\n    }\n\n    return(\n        <div className=\"OperationsMenuButton\">\n            <button onClick={()=>handleShow(true)}>Operations menu</button>\n            <Modal isOpen={show} \n                   style={customStyles}\n                   shouldCloseOnOverlayClick={true}\n                   onRequestClose={()=>handleClose(false)}\n            > \n            <Tabs>\n                <TabList>\n                    <Tab>Dispatch operation</Tab>\n                    <Tab>Routines designer</Tab>\n                </TabList>\n                <TabPanel>\n                <div>\n                    <h2>Operations Menu</h2>\n                    <h3>Selected frames</h3>\n                    <select value={selected_group} onChange={event=>setSelectedGroup(event.target.value)}>\n                        <option key='FOCUSSED' value='FOCUSSED'>Currently focussed frame</option>\n                        {frames_groups.map(group_name => renderGroupOption(group_name))}\n                    </select>\n                    <h3>Operation options</h3>\n                    <select value={selected_op_name} onChange={event=>handleOperationSelection(event.target.value)}>\n                        <option key='INIT' value='INIT'> Select operation</option>\n                        {available_operations.map(operation => renderOperationOption(operation))}\n                    </select> <br />\n                    bind to ROI:\n                    <select value={selected_roi} onChange={event=>setSelectedRoi(event.target.value)}>\n                        <option value={'INIT'}> Nothing </option>\n                        {available_rois.map(roi=><option key={roi.roi_id} value={roi.roi_id}>ID: {roi.roi_id}</option>)}\n                    </select>\n                    {renderParamsForOperation(selected_op_object, available_rois.find((roi)=>(roi.roi_id == selected_roi)))}\n                </div>\n                <div>\n                    <button onClick={()=>{\n                        if(selected_op_name!=='INIT'){\n                            dispatchOperation(extractIds(active_frames, selected_group),\n                                              extractParameters(selected_op_object, available_rois.find((roi)=>(roi.roi_id == selected_roi))),\n                                              selected_op_name,\n                                              data=>dispatch(addLog(data)),\n                                              data=>dispatch(updateActiveFrames(data)))}}\n                        }>Dispatch!</button>\n                </div>\n                </TabPanel>\n                <TabPanel>\n                    <RoutinesDesigner />\n                </TabPanel>\n            </Tabs>  \n\n            </Modal>\n        </div>\n    )\n}\n\nexport default OperationsMenu","export const initializeOps = available_ops_list => ({\n    type: 'INITIALIZE_OPERATIONS',\n    available_ops_list\n})\n\nexport const updateOp = updated_operation => ({\n    type: 'UPDATE_OPERATION',\n    updated_operation\n})","import React from 'react'\nimport { DataTree, NewDataWatcher, AddWindowSelection, FileDownloader, OperationsMenu } from './components'\nimport './MenuBar.css'\n\nconst MenuBar = () => {\n    return(\n        <div className='MenuBar'>\n            <DataTree />\n            <FileDownloader />\n            <NewDataWatcher />\n            <OperationsMenu />\n            <AddWindowSelection />\n        </div>\n    )\n}\n\nexport default MenuBar","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Rnd } from 'react-rnd'\nimport { removeWindow } from '../../../../actions'\nimport './WindowWrapper.css'\n\nconst WindowWrapper = (props) => {\n    const dispatch = useDispatch()\n\n    return(\n        <Rnd bounds='.WorkSpace'\n            className='WindowWrapper'\n            dragHandleClassName = 'header'\n            resizeGrid = {[20,20]}\n            dragGrid = {[20,20]}\n            default={{x:0, y:0, width: props.default_width, height: props.default_height}}\n            lockAspectRatio={props.lock_aspect_ratio}\n            enableResizing={props.resizable}\n        >\n            <div className='header'>\n                <div className='header-name'>\n                    {props.window_name + ' (id: ' + props.id +')'}\n                </div>\n                <div className='header-close' onClick={()=>dispatch(removeWindow(props.id))}>\n                    {'\\u2715'}\n                </div>\n            </div>\n            {props.children}\n        </Rnd>\n    )\n}\n\nexport default WindowWrapper","import React from 'react'\nimport { removeActiveFrame, setFocus } from '../../../../actions'\nimport { useDispatch } from 'react-redux'\nimport './DataTile.css'\nimport { SERVER_IP_IMG } from '../../../../api'\n\n\nconst prepareImgUrl = (data_frame) => {\n    let url = ''\n    try{\n        url = data_frame.data.results.simpleSubtraction.value\n        url = SERVER_IP_IMG + url\n    }\n    catch(e)\n    {\n        url = SERVER_IP_IMG + '/static/DataBrowse/img/no_img.png'\n    }\n    return(url)\n}\n\nconst DataTile = ({ data_frame }) => {\n    const dispatch = useDispatch()\n    \n    return(\n        <div className=\"DataTile\" \n             focussed={data_frame.focussed.toString()} >\n            <div className=\"TileContent\" onClick={()=>dispatch(setFocus(data_frame))}>\n                <img className=\"TileImage\" src={prepareImgUrl(data_frame)}\n                    height={70}\n                    width={70}/>\n                {data_frame.data.name + ' ' + ' (ID: ' + data_frame.id + ')'}\n            </div>\n            \n            <div className=\"close\" onClick={()=>dispatch(removeActiveFrame(data_frame))}>\n            {'\\u2715'}\n            </div>\n        </div>\n        \n    )\n}\n\nexport default DataTile\n","import React from 'react'\nimport './NavigButtons.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { focusPrevious, focusNext, clearFrames } from '../../../../actions'\n\nconst NavigButtons = () => {\n    const dispatch = useDispatch()\n\n    const active_frames = useSelector(state => state.activeframes)\n    const frame_focussed = active_frames.find(frame => frame.focussed === true)\n\n    return (\n        <div>\n            <button className={'NavigButton'} onClick={()=>dispatch(focusPrevious(frame_focussed))}> {'\\u25C0'} </button>\n            <button className={'NavigButton'} onClick={()=>dispatch(clearFrames())}> Clear </button>\n            <button className={'NavigButton'} onClick={()=>dispatch(focusNext(frame_focussed))}> {'\\u25B6'} </button>\n        </div>\n    )\n}\n\nexport default NavigButtons","import React, { useEffect, useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport DataTile from './DataTile'\nimport NavigButtons from './NavigButtons'\nimport './SelectedFramesList.css'\n\n\nconst scrollToRef = (ref, spaceRef) => {\n    if(ref.current !== null){\n        const offset = ref.current.offsetTop - spaceRef.current.scrollTop\n        if(offset > spaceRef.current.clientHeight || offset < 0) {\n            spaceRef.current.scrollTo(0, ref.current.offsetTop - 100)\n        }\n    }\n}\n                                                            \n\nconst SelectedFramesList = () => {\n    const active_frames = useSelector(state => state.activeframes)\n    const frame_focussed = active_frames.find(frame => frame.focussed === true)\n\n    const tileRef = useRef(null)\n    const spaceRef = useRef(null)\n\n    useEffect(() => scrollToRef(tileRef, spaceRef))\n\n    return(\n        <div className=\"SelectedFramesList\">\n            <NavigButtons />\n            <div className='TilesSpace' ref={spaceRef}>\n                {active_frames.map((frame) => {\n                    if(frame.id === frame_focussed.id) {\n                        return(<div ref={tileRef} key={frame.id}><DataTile key={frame.id} data_frame={frame}/></div>) //PASS THE REFERENCE INTO THE DATATILE!!!!\n                    } else {\n                        return(<div key={frame.id}><DataTile key={frame.id} data_frame={frame}/></div>)\n                    }\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default SelectedFramesList","import React, { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport './LogList.css'\n\nconst LogList = () => {\n    const logs = useSelector(state => state.loglist)\n    const ref = React.createRef()\n    useEffect(()=>{ref.current.scrollTop = ref.current.scrollHeight})\n    return(\n        <div className='Console' ref={ref}>\n            <ul>\n                {logs.map((log, index) => (<li key={log + index}>{log}</li>))}\n            </ul>\n        </div>\n    )\n}\n\nexport default LogList","import React from 'react'\n\nconst renderCell = (obj) => {\n    if(obj !== undefined){\n        return(<td>{obj}</td>)\n    }\n    else\n        return('')\n}\n\nconst Attribute = ({props}) => {\n    return(\n        <tr>\n            {renderCell(props.name)}\n            {renderCell(props.type)}\n            {renderCell(props.value)}\n        </tr>\n    )\n}\n\nexport default Attribute","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport  Attribute  from './Attribute'\nimport './FrameAttributes.css'\n\n\nconst FrameAttributesList = () => {\n    const selected_frame = useSelector(state => state.activeframes).find(frame => frame.focussed === true)\n\n    const parseFrame = (frame, selection) => {\n        if(frame === undefined) {\n            return []\n        }\n        else {\n            let parsed = []\n            let selected_data = (selection === 'PROPS')? selected_frame.data.properties : selected_frame.data.results\n            for(let item in selected_data){\n                if(selection === 'RES'){\n                    parsed.push({name: item, type: selected_data[item].type, value: selected_data[item].value})\n                }\n                else {\n                    parsed.push({name: item, value: selected_data[item]})\n                }\n            }\n            return parsed\n        }\n    }\n\n    const [selected_option, setSelectedOption] = useState('PROPS')\n\n    const renderPreamble = () => {\n        if(selected_option === 'RES') {\n            return(\n                <tr>\n                    <th>\n                        Result Name\n                    </th>\n                    <th>\n                        Result Type\n                    </th>\n                    <th>\n                        Result Value\n                    </th>\n                </tr>\n            )\n        } else {\n            return(\n                <tr>\n                    <th>\n                        Property Name\n                    </th>\n                    <th>\n                        Property Value\n                    </th>\n                </tr>\n            )\n            \n        }\n    }\n\n    return(\n        <div className=\"FrameAttributesList\">\n            <label>\n            Display: \n            <select value={selected_option} onChange={event=>setSelectedOption(event.target.value)}>\n                <option value={'PROPS'}>Properties</option>\n                <option value={'RES'}>Results</option>\n            </select>\n            </label>\n            <div className='tableSpace'>\n            <table>\n                <tbody>\n                    {renderPreamble()}\n                    {parseFrame(selected_frame, selected_option).map((attribute, index) => (<Attribute key={index} props={attribute} />))}\n                </tbody>\n            </table>\n            </div>\n        </div>\n    )\n}\n\n\nexport default FrameAttributesList","import React from 'react'\nimport { SERVER_IP_IMG } from '../../../../api'\n\n\nconst prepareImgUrl = (data_frame, selection) => {\n    let url = ''\n    try{\n        url = data_frame.data.results[selection].value\n        url = SERVER_IP_IMG + url\n    }\n    catch(e)\n    {\n        url = SERVER_IP_IMG + '/static/DataBrowse/img/no_img.png'\n    }\n    return(url)\n}\n\n\nconst ImageSpace = (props) => {\n    return(\n             <img className='SelectedImage' src={prepareImgUrl(props.data_frame, props.selection)} />\n    )\n\n}\n\nexport default ImageSpace","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux' \nimport ImageSpace from './ImageSpace'\nimport './ImageDisplayer.css'\n\nfunction getAvailResults(selected_frame){\n    let results = []\n    if(selected_frame !== undefined){\n        for(let result in selected_frame.data.results){\n            if(selected_frame.data.results[result].type === 'IMG'){\n                results.push(result)\n            }\n        }\n    } else {\n        results.push('None')\n    }\n\n    return results\n}\n\nconst ImageDisplayer = () => {\n    const selected_frame = useSelector(state => state.activeframes).find(frame => frame.focussed === true)\n\n    const avail_img_results = getAvailResults(selected_frame)\n    \n    const [selected_result, setSelectedResult] = useState('INIT')\n\n    return(\n    <div className='ImageDisplayer'>\n        <div className ='ResultSelect'>\n        <select  value={selected_result} onChange={event=>setSelectedResult(event.target.value)}>\n            <option value={'INIT'}>Select result to show</option>\n            {avail_img_results.map((result, index) => (<option key={index} value={result}>{result}</option>))}\n        </select>\n        </div>\n\n        <ImageSpace data_frame={selected_frame} selection={selected_result} />\n    </div>\n    )\n}\n\nexport default ImageDisplayer","import React from 'react'\nimport { SERVER_IP_IMG } from '../../../../../api'\n\n\nconst prepareImgUrl = (data_frame, selection) => {\n    let url = ''\n    try{\n        url = data_frame.data.results[selection].value\n        url = SERVER_IP_IMG + url\n    }\n    catch(e)\n    {\n        url = SERVER_IP_IMG + '/static/DataBrowse/img/no_img.png'\n    }\n    return(url)\n}\n\n\nconst ImageSpaceRoi = (props) => {\n\n    return(\n        <div className='SelectedImageRoi'>\n             <img className='ImageRoi' src={prepareImgUrl(props.data_frame, props.selection)} onLoad={(e)=>props.imgOnload(e.target.naturalWidth, e.target.naturalHeight)}/>\n             {props.children}\n        </div>\n       \n    )\n\n}\n\nexport default ImageSpaceRoi","import React, { useState } from 'react'\nimport { useSelector } from 'react-redux' \nimport ImageSpaceRoi from './ImageSpaceRoi'\nimport './ImageDisplayerRoi.css'\n\nfunction getAvailResults(selected_frame){\n    let results = []\n    if(selected_frame !== undefined){\n        for(let result in selected_frame.data.results){\n            if(selected_frame.data.results[result].type === 'IMG'){\n                results.push(result)\n            }\n        }\n    } else {\n        results.push('None')\n    }\n\n    return results\n}\n\nconst ImageDisplayerRoi = (props) => {\n    const selected_frame = useSelector(state => state.activeframes).find(frame => frame.focussed === true)\n\n    const avail_img_results = getAvailResults(selected_frame)\n    \n    const [selected_result, setSelectedResult] = useState('INIT')\n\n    return(\n    <div className='ImageDisplayerRoi'>\n        <div className ='ResultSelect'>\n        <select  value={selected_result} onChange={event=>setSelectedResult(event.target.value)}>\n            <option value={'INIT'}>Select result to show</option>\n            {avail_img_results.map((result, index) => (<option key={index} value={result}>{result}</option>))}\n        </select>\n        </div>\n\n        <ImageSpaceRoi data_frame={selected_frame} selection={selected_result} imgOnload={props.imgOnload}>\n            {props.children}\n        </ImageSpaceRoi>\n    </div>\n    )\n}\n\nexport default ImageDisplayerRoi","import React from 'react'\nimport { Rnd } from 'react-rnd'\n\n\nconst RoiRectangle = ({ placement, id, onDrag, onResize }) => {\n    return(\n        <Rnd\n          position={{x:placement.x, y:placement.y}}\n          size={{width: placement.width, height: placement.height}}\n          title = {id}\n          bounds='.SelectedImageRoi'\n          onDragStop={(_, data)=>{onDrag(id, data.x, data.y)}}\n          onResizeStop={(e, direction, ref, delta, position)=>{onResize(id, position.x, position.y, ref.offsetWidth, ref.offsetHeight)}}>\n        <div className='Rectangle'></div>\n        </Rnd>\n    )\n}\n\nexport default RoiRectangle","import React from 'react'\nimport { Rnd } from 'react-rnd'\n\n\nconst RoiPoint = ({ placement, id, onDrag}) => {\n    return(\n        <Rnd\n          position={{x:placement.x, y:placement.y}}\n          size={{width: 20, height: 20}}\n          title = {id}\n          enableResizing = {false}\n          bounds='.SelectedImageRoi'\n          onDragStop={(_, data)=>{onDrag(id, data.x, data.y)}}>\n        <div className='Point'>{'\\u2715'}</div>\n        </Rnd>\n    )\n}\n\nexport default RoiPoint","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ImageDisplayerRoi } from './components'\nimport { RoiRectangle, RoiPoint } from './components'\nimport { updateImageRoiXY, updateImageRoiWH } from '../../../../actions'\nimport './SelectRoi.css'\n\n\nconst SelectRoi = () => {\n    const [currentImageSizeX, setImageSizeX] = useState(0)\n    const [currentImageSizeY, setImageSizeY] = useState(0)\n\n    const setSize = (width, height) => {\n        setImageSizeX(width)\n        setImageSizeY(height)\n    }\n\n    const dispatch = useDispatch()\n\n    const translateRectDataToPos = (data) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return({x: Math.floor(data.x/scalling),\n                    y: Math.floor(data.y/scalling),\n                    width: Math.floor(data.width/scalling),\n                    height: Math.floor(data.height/scalling)})\n        }\n        else{\n            return data\n        }\n    }\n\n    const translatePointDataToPos = (data) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return({x: Math.floor(data.x/scalling - 12),\n                    y: Math.floor(data.y/scalling - 12)})\n        }\n        else{\n            return({x: Math.floor((data.x - 12)),\n                    y: Math.floor((data.y - 12))})\n        }\n    }\n\n    const translateValToData = (val) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return(Math.floor(val*scalling))\n        }\n        else {\n            return(val)\n        }\n    }\n    \n    const translatePointValToData = (val) => {\n        const scalling = currentImageSizeX/600\n        if(scalling>1) {\n            return(Math.floor(val*scalling + 12*scalling))\n        }\n        else {\n            return(val + 12)\n        }\n    } \n\n    const updatePosition = (id, x, y) => {\n        dispatch(updateImageRoiXY(id, translateValToData(x), translateValToData(y)))\n    }\n\n    const updatePointPostion = (id, x, y) => {\n        dispatch(updateImageRoiXY(id, translatePointValToData(x), translatePointValToData(y)))\n    }\n\n    const updateSize = (id, x, y, w, h) => {\n        dispatch(updateImageRoiXY(id, translateValToData(x), translateValToData(y)))\n        dispatch(updateImageRoiWH(id, translateValToData(w), translateValToData(h)))\n    }\n\n    const all_rois = useSelector(state => state.imagerois)\n    const rois_to_display = all_rois.filter(roi => roi.display_roi === true)\n\n    const printRoi = (roi) => {\n        switch(roi.roi_type) {\n            case 'RECTANGLE':\n                return <RoiRectangle key={roi.roi_id} id={roi.roi_id} placement={translateRectDataToPos(roi.roi_data)} onDrag={updatePosition} onResize={updateSize}/>\n            case 'POINT':\n                return <RoiPoint key={roi.roi_id} id={roi.roi_id} placement={translatePointDataToPos(roi.roi_data)} onDrag={updatePointPostion}/>\n        }\n    }\n\n    return(\n        <div className='SelectRoi'>\n            <ImageDisplayerRoi imgOnload={setSize}>\n                {rois_to_display.map(roi=> printRoi(roi))}\n            </ImageDisplayerRoi>   \n        </div>\n    )\n}\n\nexport default SelectRoi","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setRoiDisplay, removeRoi } from '../../../../actions'\nimport './RoiTile.css'\n\n\nconst RoiTile = ({ roi }) => {\n\n    const dispatch = useDispatch()\n\n    return(\n        <div className='RoiTile'>\n            ROI ID: {roi.roi_id} <input type='checkbox' checked={roi.display_roi} onClick={() => dispatch(setRoiDisplay(roi.roi_id, !roi.display_roi))}></input> \n            <div className=\"close\" onClick={() => dispatch(removeRoi(roi.roi_id))} >\n            {'\\u2715'}\n            </div>\n            \n            <br/> \n            type: {roi.roi_type} <br/>\n            {JSON.stringify(roi.roi_data, null, 1)}\n        </div>\n    )\n}\n\nexport default RoiTile","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addImageRoi } from '../../../../actions'\nimport RoiTile from './RoiTile'\nimport './RoiManager.css'\n\nconst RECTANGLE_DEF = {x:0,y:0,width:200,height:200}\nconst POINT_DEF = {x:200,y:200}\n\nconst RoiManager = () => {\n    const dispatch = useDispatch()\n    \n    const all_rois = useSelector(state => state.imagerois)\n    \n    return(\n    <div className='RoiManager'>\n        <div className='RoiButtons'>\n            <button className='AddButton' onClick={()=>dispatch(addImageRoi('RECTANGLE', RECTANGLE_DEF, true))}>Add rectangle</button>\n            <button className='AddButton' onClick={()=>dispatch(addImageRoi('POINT', POINT_DEF, true))}>Add point</button>\n        </div>\n        <div className='RoisList'>\n            {all_rois.map(roi=>(\n                <RoiTile key={roi.roi_id} roi={roi}/>\n            ))}\n        </div>    \n    </div>\n    )\n}\n\nexport default RoiManager","import React, { useState } from 'react'\nimport ReactEcharts from 'echarts-for-react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setFocus } from '../../../../actions'\nimport './ChartDisplayer.css'\n\n\nconst COLOR_PALETTE = ['#111d5e', '#c70039', '#f37121', '#ffbd69', '#086972', '#01a9b4', '#87dfd6', '#fbfd8a', '#184d47', '#96bb7c']\n\nconst getOptionsForAxes = (data_frames) => {\n    let options = {}\n    let properties = []\n    let results = []\n\n    for(const entry of data_frames){\n        for(const property in entry.data.properties) {\n          if(!properties.includes(property)){\n            properties.push(property)\n          }\n        }\n        for(const result in entry.data.results) {\n          if(!results.includes(result) && entry.data.results[result].type === 'NUM'){\n            results.push(result)\n          }\n        }\n      }\n      options['properties'] = properties\n      options['results'] = results\n      return options\n}\n\nconst getResultStr = (result) => ('Result: ' + result)\n\nconst getPropertyStr = (property) => ('Property: ' + property)\n\nconst extractDataFromFrames = (data_frames, value_source) => {\n    //value_source is a string that represents source of the data we are gathering. Usually it is a name of a server-side function that calculated given result or property for a frame.\n    //As this function is used in ChartDisplayer, it assumes that the name starts with 'p' or 'r', which helps to determine if a value should be seeken in Properties or Results.\n\n    const source_char = value_source.slice(0,1)\n    const option = value_source.slice(1)\n\n    let values = {}\n\n    switch(source_char) {\n        case 'p':\n            for(const frame of data_frames) {\n                try{\n                    values[frame.id] = frame.data.properties[option]\n                } catch(e){}\n            }\n        case 'r':\n            for(const frame of data_frames) {\n                try{\n                    values[frame.id] = frame.data.results[option].value\n                } catch(e){}\n            }\n        default: {}\n    }\n    return values\n}\n\nconst getDataPointsFromXandY = (x_data, y_data) => {\n    const data = []\n    for(const point in x_data){\n        if(y_data.hasOwnProperty(point)){\n            let temp = {}\n            temp.id = point\n            temp.data = [Number(x_data[point]), Number(y_data[point])]\n            data.push(temp)\n        }\n      }\n    return data\n}\n\nconst getRangesForPlot = (data_points) => {\n    const values_x = data_points.map(el => el.data[0])\n    const values_y = data_points.map(el => el.data[1])\n    const min_x = Math.min.apply(null, values_x)\n    const max_x = Math.max.apply(null, values_x)\n    const min_y = Math.min.apply(null, values_y)\n    const max_y = Math.max.apply(null, values_y)\n    const range_x = max_x - min_x\n    const range_y = max_y - min_y\n    \n    return({'min_x':min_x - 0.05*range_x, 'max_x':max_x + 0.05*range_x, 'min_y':min_y - 0.05*range_y, 'max_y':max_y + 0.05*range_y})\n}\n\nconst findDiferentFramesGroups = (frames) => {\n    const frames_groups = []\n    for(const frame of frames) {\n        if(!frames_groups.includes(frame.data.sequence_name)) {\n            frames_groups.push(frame.data.sequence_name)\n        }\n    }\n    return(frames_groups)\n}\n\nconst assignColorsToIds = (data_frames) => {\n    const frames_groups = findDiferentFramesGroups(data_frames)\n    const group_color_assignment = {}\n    for(const [i, item] of frames_groups.entries()) {\n        group_color_assignment[item] = COLOR_PALETTE[i % COLOR_PALETTE.length]\n    }\n    const id_color_assignment = {}\n    for(const frame of data_frames) {\n        id_color_assignment[frame.id] = group_color_assignment[frame.data.sequence_name]\n    }\n    return(id_color_assignment)\n}\n\nconst renderOptionsForEchartsChart = (data, xlabel, ylabel, ranges, color_assignment) => {\n    let x_name = ''\n    let y_name = ''\n\n    if(xlabel[0] === 'p' || xlabel[0] ==='r'){\n        x_name = xlabel.slice(1)\n    }\n\n    if(ylabel[0] === 'p' || ylabel[0] ==='r'){\n        y_name = ylabel.slice(1)\n    }\n\n    const options = {\n        backgroundColor: '#f4f4f4',\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n              type: 'cross'\n          }\n        },\n        xAxis: {\n            min: ranges.min_x,\n            max: ranges.max_x,\n            name: x_name,\n            nameLocation: 'center',\n          type: 'value',\n          splitLine: {\n              lineStyle: {\n                  type: 'dashed'\n              }\n          },\n        },\n        yAxis: {\n            min: ranges.min_y,\n            max: ranges.max_y,\n            name: y_name,\n          type: 'value',\n          splitLine: {\n              lineStyle: {\n                  type: 'dashed'\n              }\n          }\n        },\n        series: []\n    }\n\n    for(const item of data) {\n        options.series.push({\n            name: item.id,\n            data: [item.data],\n            type: 'scatter',\n            color: color_assignment[item.id],\n            emphasis: {\n                label: {\n                    show: true,\n                    position: 'left',\n                    color: 'black',\n                    fontSize: 16\n                }\n            }\n        })\n    }\n\n    return options\n}\n\nconst exportToCsv =(filename, rows) => {\n    var processRow = function (row) {\n        var finalVal = '';\n        for (var j = 0; j < row.length; j++) {\n            var innerValue = row[j] === null ? '' : row[j].toString();\n            if (row[j] instanceof Date) {\n                innerValue = row[j].toLocaleString();\n            };\n            var result = innerValue.replace(/\"/g, '\"\"');\n            if (result.search(/(\"|,|\\n)/g) >= 0)\n                result = '\"' + result + '\"';\n            if (j > 0)\n                finalVal += ',';\n            finalVal += result;\n        }\n        return finalVal + '\\n';\n    };\n  \n    var csvFile = '';\n    for (var i = 0; i < rows.length; i++) {\n        csvFile += processRow(rows[i]);\n    }\n  \n    var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n    if (navigator.msSaveBlob) { // IE 10+\n        navigator.msSaveBlob(blob, filename);\n    } else {\n        var link = document.createElement(\"a\");\n        if (link.download !== undefined) { // feature detection\n            // Browsers that support HTML5 download attribute\n            var url = URL.createObjectURL(blob);\n            link.setAttribute(\"href\", url);\n            link.setAttribute(\"download\", filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n\nconst handleCsvDownload = (filename, points) => {\n    const extracted_data_points = []\n    for(const point of points) {\n        extracted_data_points.push(point.data)\n    }\n    exportToCsv(filename, extracted_data_points)\n} \n\n\nconst ChartDisplayer = () => {\n    const dispatch = useDispatch()\n    const data_frames = useSelector(state => state.activeframes)\n\n    const color_assignment = assignColorsToIds(data_frames)\n\n    const [x_axis_selection, setXAxis] = useState('INIT')\n    const [y_axis_selection, setYAxis] = useState('INIT')\n\n    const avail_options = getOptionsForAxes(data_frames)\n\n    const x_data = extractDataFromFrames(data_frames, x_axis_selection)\n    const y_data = extractDataFromFrames(data_frames, y_axis_selection)\n\n    const points = getDataPointsFromXandY(x_data, y_data)\n    const ranges = getRangesForPlot(points)\n    \n    const events = {click: (e) => dispatch(setFocus(data_frames.find(frame => frame.id === Number(e.seriesName))))}\n\n\n    return(\n        <div className ='ChartDisplayer'>\n            <div className = 'ChartSelector'>\n                Select X:\n                <select value={x_axis_selection} onChange={event=>setXAxis(event.target.value)}>\n                    <option value={'INIT'}>Select values source</option>\n                    {//Additional 'p' or 'r' in value is used later to determine if a source of the value is located in properties or in results of data frames\n                    }\n                    {avail_options.properties.map((property, index) => (<option key={'p' + String(index)} value={'p' + property}>{getPropertyStr(property)}</option>))}\n                    {avail_options.results.map((result, index) => (<option key={'r' + String(index)} value={'r' + result}>{getResultStr(result)}</option>))}\n                </select>\n                Select Y:\n                <select value={y_axis_selection} onChange={event=>setYAxis(event.target.value)}>\n                    <option value={'INIT'}>Select values source</option>\n                    {avail_options.properties.map((property, index) => (<option key={'p' + String(index)} value={'p' + property}>{getPropertyStr(property)}</option>))}\n                    {avail_options.results.map((result, index) => (<option key={'r' + String(index)} value={'r' + result}>{getResultStr(result)}</option>))}\n                </select>\n                <button onClick={() => handleCsvDownload('result.csv', points)}>Download</button>\n            </div>\n\n                <ReactEcharts option={renderOptionsForEchartsChart(points, x_axis_selection, y_axis_selection, ranges, color_assignment)} \n                              onEvents={events}\n                              style={{\n                                height: 'calc(100% - 30px)',\n                                width: '100%',\n                              }}/>\n\n        </div>\n    )\n}\n\nexport default ChartDisplayer","import React from 'react'\nimport { default as WindowWrapper } from './WindowWrapper'\nimport { LogList, SelectedFramesList, FrameAttributesList, ImageDisplayer, SelectRoi, RoiManager, ChartDisplayer } from '../components'\n\nexport const WrappedLogList = (props) => (\n    <WindowWrapper \n      id={props.id}\n      window_name='Application logs'\n      default_width={400}\n      default_height={120}>\n        <LogList/>\n    </WindowWrapper>\n)\n    \nexport const WrappedSelectedFramesList = (props) => (\n    <WindowWrapper \n      id={props.id} \n      window_name='Selected frames'\n      default_width={250}\n      default_height={520}>\n        <SelectedFramesList/>\n    </WindowWrapper>\n)\n\nexport const WrappedRoiManager = (props) => (\n    <WindowWrapper \n      id={props.id} \n      window_name='ROIs manager'\n      default_width={340}\n      default_height={320}>\n        <RoiManager/>\n    </WindowWrapper>\n)\n\nexport const WrappedAttributesList = (props) => (\n    <WindowWrapper   \n      id={props.id} \n      window_name='Data frame atributes'\n      default_width={600}\n      default_height={280}>\n        <FrameAttributesList />\n    </WindowWrapper>\n)\n\nexport const WrappedImageDisplayer = (props) => (\n    <WindowWrapper\n      id={props.id}\n      window_name='Image displayer'\n      default_width={400}\n      default_height={452}\n      lock_aspect_ratio={true}>\n        <ImageDisplayer/>\n    </WindowWrapper>\n)\n\nexport const WrappedSelectRoi = (props) => (\n    <WindowWrapper\n      id={props.id}\n      window_name='ROIs'\n      default_width={600}\n      default_height={600}\n      resizable={false}>\n        <SelectRoi/>\n    </WindowWrapper>\n)\n\nexport const WrappedChartDisplayer = (props) => (\n    <WindowWrapper\n      id={props.id}\n      window_name='Chart'\n      default_width={600}\n      default_height={400}>\n        <ChartDisplayer/>\n    </WindowWrapper>\n)","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport './WorkSpace.css'\nimport { WrappedLogList, \n         WrappedSelectedFramesList, \n         WrappedAttributesList, \n         WrappedImageDisplayer, \n         WrappedSelectRoi, \n         WrappedRoiManager,\n         WrappedChartDisplayer } from './wrapped_components'\nimport { ChartDisplayer } from './components'\n\n\n\nconst selectWindow = ({id, window_type}) => {\n    switch(window_type) {\n        case 'SelectedFrames':\n            return(<WrappedSelectedFramesList key={id} id={id}/>)\n        case 'LogList':\n            return(<WrappedLogList key={id} id={id}/>)\n        case 'AttributesList':\n            return(<WrappedAttributesList key={id} id={id}/>)\n        case 'ImageDisplayer':\n            return(<WrappedImageDisplayer key={id} id={id}/>)\n        case 'ROIs':\n            return(<WrappedSelectRoi key={id} id={id}/>)\n        case 'RoiManager':\n            return(<WrappedRoiManager key={id} id={id}/>)\n        case 'ChartDisplayer':\n            return(<WrappedChartDisplayer key={id} id={id}/>)\n        default:\n            console.log('Unknown window')\n    }\n}\n\n\nconst WorkSpace = () => {\n    const windows = useSelector(state => state.openwindows)\n    return(\n        <div className='WorkSpace'>\n            {windows.map(window => selectWindow(window))}\n        </div>\n    )\n}\n\nexport default WorkSpace","import React from 'react'\nimport { MenuBar, WorkSpace } from './components'\nimport './App.css'\n\nconst App = () => {\n  return(\n    <div>\n      <MenuBar />\n      <WorkSpace />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\nimport App from './App'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}